{
  "version": 3,
  "sources": ["../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/util/constants.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/util/index.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/functions/util.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/types/errors.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/functions/post_fetch_processing.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/functions/post_request.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/functions/pre_fetch_processing.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/functions/generate_content.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/models/chat_session.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/functions/count_tokens.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/models/generative_models.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/models/index.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/types/common.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/types/content.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/types/tool.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/types/generate_content_response_handler.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/types/index.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/resources/cached_contents.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/resources/shared/api_client.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/resources/index.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/vertex_ai.ts", "../../.pnpm/@google-cloud+vertexai@1.9.3/node_modules/@google-cloud/vertexai/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const GENERATE_CONTENT_METHOD = 'generateContent';\nexport const STREAMING_GENERATE_CONTENT_METHOD = 'streamGenerateContent';\nexport const COUNT_TOKENS_METHOD = 'countTokens';\nexport const USER_ROLE = 'user';\nexport const MODEL_ROLE = 'model';\nexport const SYSTEM_ROLE = 'system';\nconst USER_AGENT_PRODUCT = 'model-builder';\nconst CLIENT_LIBRARY_VERSION = '1.9.3'; // x-release-please-version\nconst CLIENT_LIBRARY_LANGUAGE = `grpc-node/${CLIENT_LIBRARY_VERSION}`;\nexport const USER_AGENT = `${USER_AGENT_PRODUCT}/${CLIENT_LIBRARY_VERSION} ${CLIENT_LIBRARY_LANGUAGE}`;\nexport const CREDENTIAL_ERROR_MESSAGE =\n  '\\nUnable to authenticate your request\\\n        \\nDepending on your run time environment, you can get authentication by\\\n        \\n- if in local instance or cloud shell: `!gcloud auth login`\\\n        \\n- if in Colab:\\\n        \\n    -`from google.colab import auth`\\\n        \\n    -`auth.authenticate_user()`\\\n        \\n- if in service account or other: please follow guidance in https://cloud.google.com/docs/authentication';\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * as constants from './constants';\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Content} from '../types/content';\nimport {constants} from '../util';\n\nexport function formulateSystemInstructionIntoContent(\n  systemInstruction: string | Content\n): Content {\n  if (typeof systemInstruction === 'string') {\n    return {\n      role: constants.SYSTEM_ROLE,\n      parts: [{text: systemInstruction}],\n    } as Content;\n  }\n  systemInstruction.role = constants.SYSTEM_ROLE;\n  return systemInstruction;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * GoogleAuthError is thrown when there is authentication issue with the request\n */\nclass GoogleAuthError extends Error {\n  public readonly stackTrace?: Error;\n  constructor(message: string, stackTrace?: Error) {\n    super(message, {cause: stackTrace});\n    this.message = constructErrorMessage('GoogleAuthError', message);\n    this.name = 'GoogleAuthError';\n    this.stackTrace = stackTrace;\n  }\n}\n\n/**\n * ClientError is thrown when http 4XX status is received.\n * For details please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses\n */\nclass ClientError extends Error {\n  public readonly stackTrace?: Error;\n  constructor(message: string, stackTrace?: Error) {\n    super(message, {cause: stackTrace});\n    this.message = constructErrorMessage('ClientError', message);\n    this.name = 'ClientError';\n    this.stackTrace = stackTrace;\n  }\n}\n\n/**\n * Google API Error Details object that may be included in an error response.\n * See https://cloud.google.com/apis/design/errors\n * @public\n */\nexport declare interface ErrorDetails {\n  '@type'?: string;\n  reason?: string;\n  domain?: string;\n  metadata?: Record<string, unknown>;\n  [key: string]: unknown;\n}\n\n/**\n * GoogleApiError is thrown when http 4XX status is received.\n * See https://cloud.google.com/apis/design/errors\n */\nclass GoogleApiError extends Error {\n  constructor(\n    message: string,\n    public code?: number,\n    public status?: string,\n    public errorDetails?: ErrorDetails[]\n  ) {\n    super(message);\n  }\n}\n\n/**\n * GoogleGenerativeAIError is thrown when http response is not ok and status code is not 4XX\n * For details please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n */\nclass GoogleGenerativeAIError extends Error {\n  public readonly stackTrace?: Error;\n  constructor(message: string, stackTrace?: Error) {\n    super(message, {cause: stackTrace});\n    this.message = constructErrorMessage('GoogleGenerativeAIError', message);\n    this.name = 'GoogleGenerativeAIError';\n    this.stackTrace = stackTrace;\n  }\n}\n\n/**\n * IllegalArgumentError is thrown when the request or operation is invalid\n */\nclass IllegalArgumentError extends Error {\n  public readonly stackTrace?: Error;\n  constructor(message: string, stackTrace?: Error) {\n    super(message, {cause: stackTrace});\n    this.message = constructErrorMessage('IllegalArgumentError', message);\n    this.name = 'IllegalArgumentError';\n    this.stackTrace = stackTrace;\n  }\n}\n\nfunction constructErrorMessage(\n  exceptionClass: string,\n  message: string\n): string {\n  return `[VertexAI.${exceptionClass}]: ${message}`;\n}\n\nexport {\n  ClientError,\n  GoogleApiError,\n  GoogleAuthError,\n  GoogleGenerativeAIError,\n  IllegalArgumentError,\n};\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CitationMetadata,\n  Content,\n  CountTokensResponse,\n  GenerateContentCandidate,\n  GenerateContentResponse,\n  GenerateContentResult,\n  GroundingMetadata,\n  StreamGenerateContentResult,\n} from '../types/content';\nimport {constants} from '../util';\nimport {\n  ClientError,\n  GoogleApiError,\n  GoogleGenerativeAIError,\n} from '../types/errors';\n\nexport async function throwErrorIfNotOK(response: Response | undefined) {\n  if (response === undefined) {\n    throw new GoogleGenerativeAIError('response is undefined');\n  }\n  if (!response.ok) {\n    const status: number = response.status;\n    const statusText: string = response.statusText;\n    const errorBody = await response.json();\n    const errorMessage = `got status: ${status} ${statusText}. ${JSON.stringify(\n      errorBody\n    )}`;\n    if (status >= 400 && status < 500) {\n      const error = new ClientError(\n        errorMessage,\n        new GoogleApiError(\n          errorBody.error.message,\n          errorBody.error.code,\n          errorBody.error.status,\n          errorBody.error.details\n        )\n      );\n      throw error;\n    }\n    throw new GoogleGenerativeAIError(errorMessage);\n  }\n}\n\nconst responseLineRE = /^data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n\nasync function* generateResponseSequence(\n  stream: ReadableStream<GenerateContentResponse>\n): AsyncGenerator<GenerateContentResponse> {\n  const reader = stream.getReader();\n  while (true) {\n    const {value, done} = await reader.read();\n    if (done) {\n      break;\n    }\n    yield addMissingIndexAndRole(value);\n  }\n}\n\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n * @ignore\n */\nexport async function processStream(\n  response: Response | undefined\n): Promise<StreamGenerateContentResult> {\n  if (response === undefined) {\n    throw new GoogleGenerativeAIError(\n      'Error processing stream because response === undefined'\n    );\n  }\n  if (!response.body) {\n    throw new GoogleGenerativeAIError(\n      'Error processing stream because response.body not found'\n    );\n  }\n  const inputStream = response.body!.pipeThrough(\n    new TextDecoderStream('utf8', {fatal: true})\n  );\n  const responseStream = getResponseStream(\n    inputStream\n  ) as ReadableStream<GenerateContentResponse>;\n  const [stream1, stream2] = responseStream.tee();\n  return Promise.resolve({\n    stream: generateResponseSequence(stream1),\n    response: getResponsePromise(stream2),\n  });\n}\n\nasync function getResponsePromise(\n  stream: ReadableStream<GenerateContentResponse>\n): Promise<GenerateContentResponse> {\n  const allResponses: GenerateContentResponse[] = [];\n  const reader = stream.getReader();\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const {done, value} = await reader.read();\n    if (done) {\n      return aggregateResponses(allResponses);\n    }\n    allResponses.push(value);\n  }\n}\n\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n * @ignore\n */\nfunction getResponseStream(\n  inputStream: ReadableStream<string>\n): ReadableStream<unknown> {\n  const reader = inputStream.getReader();\n  const stream = new ReadableStream<unknown>({\n    start(controller) {\n      let currentText = '';\n      return pump();\n      function pump(): Promise<(() => Promise<void>) | undefined> {\n        return reader.read().then(({value, done}) => {\n          if (done) {\n            if (currentText.trim()) {\n              controller.error(\n                new GoogleGenerativeAIError(\n                  `Failed to parse final chunk of stream: ${currentText}`\n                )\n              );\n              return;\n            }\n            controller.close();\n            return;\n          }\n\n          currentText += value;\n          let match = currentText.match(responseLineRE);\n          let parsedResponse: unknown;\n          while (match) {\n            try {\n              parsedResponse = JSON.parse(match[1]);\n            } catch (e) {\n              controller.error(\n                new GoogleGenerativeAIError(\n                  `Error parsing JSON response from stream chunk: \"${match[1]}\"`\n                )\n              );\n              return;\n            }\n            controller.enqueue(parsedResponse);\n            currentText = currentText.substring(match[0].length);\n            match = currentText.match(responseLineRE);\n          }\n          return pump();\n        });\n      }\n    },\n  });\n  return stream;\n}\n\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n * @ignore\n * @VisibleForTesting\n */\nexport function aggregateResponses(\n  responses: GenerateContentResponse[]\n): GenerateContentResponse {\n  const lastResponse = responses[responses.length - 1];\n\n  if (lastResponse === undefined) {\n    throw new GoogleGenerativeAIError(\n      'Error aggregating stream chunks because the final response in stream chunk is undefined'\n    );\n  }\n\n  const aggregatedResponse: GenerateContentResponse = {};\n\n  if (lastResponse.promptFeedback) {\n    aggregatedResponse.promptFeedback = lastResponse.promptFeedback;\n  }\n  if (lastResponse.usageMetadata) {\n    aggregatedResponse.usageMetadata = lastResponse.usageMetadata;\n  }\n\n  for (const response of responses) {\n    if (!response.candidates || response.candidates.length === 0) {\n      continue;\n    }\n    for (let i = 0; i < response.candidates.length; i++) {\n      if (!aggregatedResponse.candidates) {\n        aggregatedResponse.candidates = [];\n      }\n      if (!aggregatedResponse.candidates[i]) {\n        aggregatedResponse.candidates[i] = {\n          index: response.candidates[i].index ?? i,\n          content: {\n            role: response.candidates[i].content?.role ?? constants.MODEL_ROLE,\n            parts: [{text: ''}],\n          },\n        } as GenerateContentCandidate;\n      }\n      const citationMetadataAggregated: CitationMetadata | undefined =\n        aggregateCitationMetadataForCandidate(\n          response.candidates[i],\n          aggregatedResponse.candidates[i]\n        );\n      if (citationMetadataAggregated) {\n        aggregatedResponse.candidates[i].citationMetadata =\n          citationMetadataAggregated;\n      }\n      const finishResonOfChunk = response.candidates[i].finishReason;\n      if (finishResonOfChunk) {\n        aggregatedResponse.candidates[i].finishReason =\n          response.candidates[i].finishReason;\n      }\n      const finishMessageOfChunk = response.candidates[i].finishMessage;\n      if (finishMessageOfChunk) {\n        aggregatedResponse.candidates[i].finishMessage = finishMessageOfChunk;\n      }\n      const safetyRatingsOfChunk = response.candidates[i].safetyRatings;\n      if (safetyRatingsOfChunk) {\n        aggregatedResponse.candidates[i].safetyRatings = safetyRatingsOfChunk;\n      }\n      if (\n        response.candidates[i].content &&\n        response.candidates[i].content.parts &&\n        response.candidates[i].content.parts.length > 0\n      ) {\n        for (const part of response.candidates[i].content.parts) {\n          if (part.text) {\n            aggregatedResponse.candidates[i].content.parts[0].text += part.text;\n          }\n          if (part.functionCall) {\n            aggregatedResponse.candidates[i].content.parts[0].functionCall =\n              part.functionCall;\n            // the empty 'text' key should be removed if functionCall is in the\n            // response\n            delete aggregatedResponse.candidates[i].content.parts[0].text;\n          }\n        }\n      }\n      const groundingMetadataAggregated: GroundingMetadata | undefined =\n        aggregateGroundingMetadataForCandidate(\n          response.candidates[i],\n          aggregatedResponse.candidates[i]\n        );\n      if (groundingMetadataAggregated) {\n        aggregatedResponse.candidates[i].groundingMetadata =\n          groundingMetadataAggregated;\n      }\n    }\n  }\n  return aggregatedResponse;\n}\n\nfunction aggregateCitationMetadataForCandidate(\n  candidateChunk: GenerateContentCandidate,\n  aggregatedCandidate: GenerateContentCandidate\n): CitationMetadata | undefined {\n  if (!candidateChunk.citationMetadata) {\n    return;\n  }\n  const emptyCitationMetadata: CitationMetadata = {\n    citations: [],\n  };\n  const citationMetadataAggregated: CitationMetadata =\n    aggregatedCandidate.citationMetadata ?? emptyCitationMetadata;\n  const citationMetadataChunk: CitationMetadata =\n    candidateChunk.citationMetadata!;\n  if (citationMetadataChunk.citations) {\n    citationMetadataAggregated.citations =\n      citationMetadataAggregated.citations!.concat(\n        citationMetadataChunk.citations\n      );\n  }\n  return citationMetadataAggregated;\n}\n\nfunction aggregateGroundingMetadataForCandidate(\n  candidateChunk: GenerateContentCandidate,\n  aggregatedCandidate: GenerateContentCandidate\n): GroundingMetadata | undefined {\n  if (!candidateChunk.groundingMetadata) {\n    return;\n  }\n  const emptyGroundingMetadata: GroundingMetadata = {\n    webSearchQueries: [],\n    retrievalQueries: [],\n    groundingChunks: [],\n    groundingSupports: [],\n  };\n  const groundingMetadataAggregated: GroundingMetadata =\n    aggregatedCandidate.groundingMetadata ?? emptyGroundingMetadata;\n  const groundingMetadataChunk: GroundingMetadata =\n    candidateChunk.groundingMetadata!;\n  if (groundingMetadataChunk.webSearchQueries) {\n    groundingMetadataAggregated.webSearchQueries =\n      groundingMetadataAggregated.webSearchQueries!.concat(\n        groundingMetadataChunk.webSearchQueries\n      );\n  }\n  if (groundingMetadataChunk.retrievalQueries) {\n    groundingMetadataAggregated.retrievalQueries =\n      groundingMetadataAggregated.retrievalQueries!.concat(\n        groundingMetadataChunk.retrievalQueries\n      );\n  }\n  if (groundingMetadataChunk.groundingChunks) {\n    groundingMetadataAggregated.groundingChunks =\n      groundingMetadataAggregated.groundingChunks!.concat(\n        groundingMetadataChunk.groundingChunks\n      );\n  }\n  if (groundingMetadataChunk.groundingSupports) {\n    groundingMetadataAggregated.groundingSupports =\n      groundingMetadataAggregated.groundingSupports!.concat(\n        groundingMetadataChunk.groundingSupports\n      );\n  }\n  if (groundingMetadataChunk.searchEntryPoint) {\n    groundingMetadataAggregated.searchEntryPoint =\n      groundingMetadataChunk.searchEntryPoint;\n  }\n  return groundingMetadataAggregated;\n}\n\nfunction addMissingIndexAndRole(\n  response: GenerateContentResponse\n): GenerateContentResponse {\n  const generateContentResponse = response as GenerateContentResponse;\n  if (\n    generateContentResponse.candidates &&\n    generateContentResponse.candidates.length > 0\n  ) {\n    generateContentResponse.candidates.forEach((candidate, index) => {\n      if (candidate.index === undefined) {\n        generateContentResponse.candidates![index].index = index;\n      }\n\n      if (candidate.content === undefined) {\n        generateContentResponse.candidates![index].content = {} as Content;\n      }\n\n      if (candidate.content.role === undefined) {\n        generateContentResponse.candidates![index].content.role =\n          constants.MODEL_ROLE;\n      }\n    });\n  }\n\n  return generateContentResponse;\n}\n\n/**\n * Process model responses from generateContent\n * @ignore\n */\nexport async function processUnary(\n  response: Response | undefined\n): Promise<GenerateContentResult> {\n  if (response !== undefined) {\n    // ts-ignore\n    const responseJson = await response.json();\n    const generateContentResponse = addMissingIndexAndRole(responseJson);\n    return Promise.resolve({\n      response: generateContentResponse,\n    });\n  }\n\n  return Promise.resolve({\n    response: {} as GenerateContentResponse,\n  });\n}\n\n/**\n * Process model responses from countTokens\n * @ignore\n */\nexport async function processCountTokenResponse(\n  response: Response | undefined\n): Promise<CountTokensResponse> {\n  if (response) {\n    // ts-ignore\n    return response.json();\n  }\n\n  return Promise.resolve({} as CountTokensResponse);\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst API_BASE_PATH = 'aiplatform.googleapis.com';\nconst GOOGLE_INTERNAL_ENDPOINT = 'googleapis.com';\n\nconst AUTHORIZATION_HEADER = 'Authorization';\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst USER_AGENT_HEADER = 'User-Agent';\nconst X_GOOG_API_CLIENT_HEADER = 'X-Goog-Api-Client';\nconst SERVER_RESERVED_HEADERS = [AUTHORIZATION_HEADER, CONTENT_TYPE_HEADER];\n\nimport {\n  GenerateContentRequest,\n  CountTokensRequest,\n  RequestOptions,\n} from '../types/content';\nimport {ClientError} from '../types/errors';\nimport * as constants from '../util/constants';\n\n/**\n * Makes a POST request to a Vertex service\n * @ignore\n */\nexport async function postRequest({\n  region,\n  resourcePath,\n  resourceMethod,\n  token,\n  data,\n  apiEndpoint,\n  requestOptions,\n  apiVersion = 'v1',\n}: {\n  region: string;\n  resourcePath: string;\n  resourceMethod: string;\n  token: string | null | undefined;\n  data: GenerateContentRequest | CountTokensRequest;\n  apiEndpoint?: string;\n  requestOptions?: RequestOptions;\n  apiVersion?: string;\n}): Promise<Response | undefined> {\n  const vertexBaseEndpoint = apiEndpoint ?? `${region}-${API_BASE_PATH}`;\n\n  let vertexEndpoint = `https://${vertexBaseEndpoint}/${apiVersion}/${resourcePath}:${resourceMethod}`;\n\n  // Use server sent events for streamGenerateContent\n  if (resourceMethod === constants.STREAMING_GENERATE_CONTENT_METHOD) {\n    vertexEndpoint += '?alt=sse';\n  }\n  const necessaryHeaders = new Headers({\n    [AUTHORIZATION_HEADER]: `Bearer ${token}`,\n    [CONTENT_TYPE_HEADER]: 'application/json',\n    [USER_AGENT_HEADER]: constants.USER_AGENT,\n  });\n  const totalHeaders: Headers = getExtraHeaders(\n    vertexBaseEndpoint,\n    necessaryHeaders,\n    requestOptions\n  );\n  return fetch(vertexEndpoint, {\n    ...getFetchOptions(requestOptions),\n    method: 'POST',\n    headers: totalHeaders,\n    body: JSON.stringify(data),\n  });\n}\n\nfunction getFetchOptions(requestOptions?: RequestOptions): RequestInit {\n  const fetchOptions = {} as RequestInit;\n  if (\n    !requestOptions ||\n    requestOptions.timeout === undefined ||\n    requestOptions.timeout < 0\n  ) {\n    return fetchOptions;\n  }\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  setTimeout(() => abortController.abort(), requestOptions.timeout);\n  fetchOptions.signal = signal;\n  return fetchOptions;\n}\n\nfunction stringHasLineBreak(header?: string | null): boolean {\n  if (header === null || header === undefined) {\n    return false;\n  }\n  return header.includes('\\n') || header.includes('\\r');\n}\nfunction headersHasLineBreak(customHeaders?: Headers): boolean {\n  if (!customHeaders) {\n    return false;\n  }\n  for (const [key, value] of customHeaders.entries()) {\n    if (stringHasLineBreak(key) || stringHasLineBreak(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction getExtraHeaders(\n  vertexBaseEndpoint: string,\n  necessaryHeaders: Headers,\n  requestOptions?: RequestOptions\n): Headers {\n  if (stringHasLineBreak(requestOptions?.apiClient)) {\n    throw new ClientError(\n      'Found line break in apiClient request option field, please remove ' +\n        'the line break and try again.'\n    );\n  }\n  if (headersHasLineBreak(requestOptions?.customHeaders)) {\n    throw new ClientError(\n      'Found line break in customerHeaders request option field, please remove ' +\n        'the line break and try again.'\n    );\n  }\n  const totalHeaders: Headers = new Headers(necessaryHeaders);\n  const customHeaders = requestOptions?.customHeaders ?? new Headers();\n  for (const [key, val] of customHeaders.entries()) {\n    totalHeaders.append(key, val);\n  }\n  if (requestOptions?.apiClient) {\n    totalHeaders.append(X_GOOG_API_CLIENT_HEADER, requestOptions?.apiClient);\n  }\n\n  // Resolve header conflicts.\n  let goldenHeaders: Headers;\n  if (vertexBaseEndpoint.endsWith(GOOGLE_INTERNAL_ENDPOINT)) {\n    goldenHeaders = necessaryHeaders;\n  } else {\n    goldenHeaders = customHeaders;\n  }\n  for (const header of SERVER_RESERVED_HEADERS) {\n    if (goldenHeaders.has(header)) {\n      totalHeaders.set(header, goldenHeaders.get(header)!);\n    }\n  }\n  return totalHeaders;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GenerateContentRequest,\n  GenerationConfig,\n  RetrievalTool,\n  SafetySetting,\n  Tool,\n} from '../types/content';\nimport {ClientError} from '../types/errors';\nimport * as constants from '../util/constants';\n\nexport function formatContentRequest(\n  request: GenerateContentRequest | string,\n  generationConfig?: GenerationConfig,\n  safetySettings?: SafetySetting[]\n): GenerateContentRequest {\n  if (typeof request === 'string') {\n    return {\n      contents: [{role: constants.USER_ROLE, parts: [{text: request}]}],\n      generationConfig: generationConfig,\n      safetySettings: safetySettings,\n    };\n  } else {\n    return request;\n  }\n}\n\nexport function validateGenerateContentRequest(\n  request: GenerateContentRequest\n) {\n  if (hasVertexAISearch(request) && hasVertexRagStore(request)) {\n    throw new ClientError(\n      'Found both vertexAiSearch and vertexRagStore field are set in tool. Either set vertexAiSearch or vertexRagStore.'\n    );\n  }\n}\n\nexport function validateGenerationConfig(\n  generationConfig: GenerationConfig\n): GenerationConfig {\n  if ('topK' in generationConfig) {\n    if (!(generationConfig.topK! > 0) || !(generationConfig.topK! <= 40)) {\n      delete generationConfig.topK;\n    }\n  }\n  return generationConfig;\n}\n\nexport function getApiVersion(\n  request: GenerateContentRequest\n): 'v1' | 'v1beta1' {\n  return hasVertexRagStore(request) || hasCachedContent(request)\n    ? 'v1beta1'\n    : 'v1';\n}\n\nexport function hasVertexRagStore(request: GenerateContentRequest): boolean {\n  for (const tool of request?.tools ?? []) {\n    const retrieval = (tool as RetrievalTool).retrieval;\n    if (!retrieval) continue;\n    if (retrieval.vertexRagStore) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction hasCachedContent(request: GenerateContentRequest): boolean {\n  return !!request.cachedContent;\n}\n\nexport function hasVertexAISearch(request: GenerateContentRequest): boolean {\n  for (const tool of request?.tools ?? []) {\n    const retrieval = (tool as RetrievalTool).retrieval;\n    if (!retrieval) continue;\n    if (retrieval.vertexAiSearch) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GenerateContentRequest,\n  GenerateContentResult,\n  GenerationConfig,\n  RequestOptions,\n  SafetySetting,\n  StreamGenerateContentResult,\n  Tool,\n} from '../types/content';\nimport {GoogleGenerativeAIError} from '../types/errors';\nimport {ToolConfig} from '../types/tool';\nimport * as constants from '../util/constants';\n\nimport {\n  processUnary,\n  processStream,\n  throwErrorIfNotOK,\n} from './post_fetch_processing';\nimport {postRequest} from './post_request';\nimport {\n  formatContentRequest,\n  validateGenerateContentRequest,\n  validateGenerationConfig,\n  hasVertexRagStore,\n  getApiVersion,\n} from './pre_fetch_processing';\n\n/**\n * Make a async call to generate content.\n * @param request A GenerateContentRequest object with the request contents.\n * @returns The GenerateContentResponse object with the response candidates.\n */\nexport async function generateContent(\n  location: string,\n  resourcePath: string,\n  token: Promise<string | null | undefined>,\n  request: GenerateContentRequest | string,\n  apiEndpoint?: string,\n  generationConfig?: GenerationConfig,\n  safetySettings?: SafetySetting[],\n  tools?: Tool[],\n  toolConfig?: ToolConfig,\n  requestOptions?: RequestOptions\n): Promise<GenerateContentResult> {\n  request = formatContentRequest(request, generationConfig, safetySettings);\n\n  validateGenerateContentRequest(request);\n\n  if (request.generationConfig) {\n    request.generationConfig = validateGenerationConfig(\n      request.generationConfig\n    );\n  }\n\n  const generateContentRequest: GenerateContentRequest = {\n    contents: request.contents,\n    systemInstruction: request.systemInstruction,\n    cachedContent: request.cachedContent,\n    generationConfig: request.generationConfig ?? generationConfig,\n    safetySettings: request.safetySettings ?? safetySettings,\n    tools: request.tools ?? tools,\n    toolConfig: request.toolConfig ?? toolConfig,\n  };\n  const response: Response | undefined = await postRequest({\n    region: location,\n    resourcePath,\n    resourceMethod: constants.GENERATE_CONTENT_METHOD,\n    token: await token,\n    data: generateContentRequest,\n    apiEndpoint,\n    requestOptions,\n    apiVersion: getApiVersion(request),\n  }).catch(e => {\n    throw new GoogleGenerativeAIError('exception posting request to model', e);\n  });\n  await throwErrorIfNotOK(response).catch(e => {\n    throw e;\n  });\n  return processUnary(response);\n}\n\n/**\n * Make an async stream request to generate content. The response will be\n * returned in stream.\n * @param {GenerateContentRequest} request - {@link GenerateContentRequest}\n * @returns {Promise<StreamGenerateContentResult>} Promise of {@link\n *     StreamGenerateContentResult}\n */\nexport async function generateContentStream(\n  location: string,\n  resourcePath: string,\n  token: Promise<string | null | undefined>,\n  request: GenerateContentRequest | string,\n  apiEndpoint?: string,\n  generationConfig?: GenerationConfig,\n  safetySettings?: SafetySetting[],\n  tools?: Tool[],\n  toolConfig?: ToolConfig,\n  requestOptions?: RequestOptions\n): Promise<StreamGenerateContentResult> {\n  request = formatContentRequest(request, generationConfig, safetySettings);\n  validateGenerateContentRequest(request);\n\n  if (request.generationConfig) {\n    request.generationConfig = validateGenerationConfig(\n      request.generationConfig\n    );\n  }\n\n  const generateContentRequest: GenerateContentRequest = {\n    contents: request.contents,\n    systemInstruction: request.systemInstruction,\n    cachedContent: request.cachedContent,\n    generationConfig: request.generationConfig ?? generationConfig,\n    safetySettings: request.safetySettings ?? safetySettings,\n    tools: request.tools ?? tools,\n    toolConfig: request.toolConfig ?? toolConfig,\n  };\n  const response = await postRequest({\n    region: location,\n    resourcePath,\n    resourceMethod: constants.STREAMING_GENERATE_CONTENT_METHOD,\n    token: await token,\n    data: generateContentRequest,\n    apiEndpoint,\n    requestOptions,\n    apiVersion: getApiVersion(request),\n  }).catch(e => {\n    throw new GoogleGenerativeAIError('exception posting request', e);\n  });\n  await throwErrorIfNotOK(response).catch(e => {\n    throw e;\n  });\n  return processStream(response);\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable */\nimport {GoogleAuth} from 'google-auth-library';\n\nimport {formulateSystemInstructionIntoContent} from '../functions/util';\nimport {\n  generateContent,\n  generateContentStream,\n} from '../functions/generate_content';\nimport {\n  Content,\n  GenerateContentRequest,\n  GenerateContentResult,\n  GenerationConfig,\n  Part,\n  RequestOptions,\n  SafetySetting,\n  StartChatSessionRequest,\n  StreamGenerateContentResult,\n  Tool,\n} from '../types/content';\nimport {ToolConfig} from '../types';\nimport {ClientError, GoogleAuthError} from '../types/errors';\nimport {constants} from '../util';\n\n/**\n * The `ChatSession` class is used to make multiturn send message requests. You\n * can instantiate this class by using the `startChat` method in the\n * `GenerativeModel` class. The `sendMessage` method makes an async call to get\n * the response of a chat message at at once. The `sendMessageStream` method\n * makes an async call to stream the response of a chat message as it's being\n * generated.\n */\nexport class ChatSession {\n  private readonly project: string;\n  private readonly location: string;\n  private historyInternal: Content[];\n  private sendStreamPromise: Promise<void> = Promise.resolve();\n  private readonly resourcePath: string;\n  private readonly googleAuth: GoogleAuth;\n  protected readonly requestOptions?: RequestOptions;\n  private readonly generationConfig?: GenerationConfig;\n  private readonly safetySettings?: SafetySetting[];\n  private readonly tools?: Tool[];\n  private readonly toolConfig?: ToolConfig;\n  private readonly apiEndpoint?: string;\n  private readonly systemInstruction?: Content;\n\n  async getHistory(): Promise<Content[]> {\n    return Promise.resolve(this.historyInternal);\n  }\n\n  /**\n   * @constructor\n   * @param request - {@link StartChatSessionRequest}\n   */\n  constructor(\n    request: StartChatSessionRequest,\n    requestOptions?: RequestOptions\n  ) {\n    this.project = request.project;\n    this.location = request.location;\n    this.googleAuth = request.googleAuth;\n    this.resourcePath = request.resourcePath;\n    this.historyInternal = request.history ?? [];\n    this.generationConfig = request.generationConfig;\n    this.safetySettings = request.safetySettings;\n    this.tools = request.tools;\n    this.toolConfig = request.toolConfig;\n    this.apiEndpoint = request.apiEndpoint;\n    this.requestOptions = requestOptions ?? {};\n    if (request.systemInstruction) {\n      this.systemInstruction = formulateSystemInstructionIntoContent(\n        request.systemInstruction\n      );\n    }\n  }\n\n  /**\n   * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n   * fails.\n   * @returns Promise of token.\n   */\n  private fetchToken(): Promise<string | null | undefined> {\n    const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n      throw new GoogleAuthError(constants.CREDENTIAL_ERROR_MESSAGE, e);\n    });\n    return tokenPromise;\n  }\n\n  /**\n   * Makes an async call to send chat message.\n   *\n   * The response is returned in {@link\n   * GenerateContentResult.response}.\n   *\n   * @example\n   * ```\n   * const chat = generativeModel.startChat();\n   * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n   * console.log('Response: ', JSON.stringify(result1.response));\n   *\n   * const result2 = await chat.sendMessage(\"What about python?\");\n   * console.log('Response: ', JSON.stringify(result2.response));\n   * ```\n   *\n   * @param request - send message request.\n   * @returns Promise of {@link GenerateContentResult}.\n   */\n  async sendMessage(\n    request: string | Array<string | Part>\n  ): Promise<GenerateContentResult> {\n    const newContent: Content[] =\n      formulateNewContentFromSendMessageRequest(request);\n    const generateContentRequest: GenerateContentRequest = {\n      contents: this.historyInternal.concat(newContent),\n      safetySettings: this.safetySettings,\n      generationConfig: this.generationConfig,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction,\n    };\n\n    const generateContentResult: GenerateContentResult = await generateContent(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      generateContentRequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    ).catch(e => {\n      throw e;\n    });\n    const generateContentResponse = await generateContentResult.response;\n    // Only push the latest message to history if the response returns a result\n    if (\n      generateContentResponse.candidates &&\n      generateContentResponse.candidates.length !== 0\n    ) {\n      this.historyInternal = this.historyInternal.concat(newContent);\n      const contentFromModel = generateContentResponse.candidates[0].content;\n      this.historyInternal.push(contentFromModel);\n    }\n\n    return Promise.resolve(generateContentResult);\n  }\n\n  private async appendHistory(\n    streamGenerateContentResultPromise: Promise<StreamGenerateContentResult>,\n    newContent: Content[]\n  ): Promise<void> {\n    const streamGenerateContentResult =\n      await streamGenerateContentResultPromise;\n    const streamGenerateContentResponse =\n      await streamGenerateContentResult.response;\n    // Only push the latest message to history if the response returned a result\n    if (\n      streamGenerateContentResponse.candidates &&\n      streamGenerateContentResponse.candidates.length !== 0\n    ) {\n      this.historyInternal = this.historyInternal.concat(newContent);\n      const contentFromModel =\n        streamGenerateContentResponse.candidates[0].content;\n      this.historyInternal.push(contentFromModel);\n    }\n  }\n\n  /**\n   * Makes an async call to stream send message.\n   *\n   * The response is streamed chunk by chunk in\n   * {@link StreamGenerateContentResult.stream}. The aggregated response is\n   * avaliable in {@link StreamGenerateContentResult.response} after all chunks\n   * are returned.\n   *\n   * @example\n   * ```\n   * const chat = generativeModel.startChat();\n   * const chatInput = \"How can I learn more about Node.js?\";\n   * const result = await chat.sendMessageStream(chatInput);\n   * for await (const item of result.stream) {\n   *   console.log(item.candidates[0].content.parts[0].text);\n   * }\n   * const response = await result.response;\n   * console.log('aggregated response: ', JSON.stringify(result.response));\n   * ```\n   *\n   * @param request - send message request.\n   * @returns Promise of {@link StreamGenerateContentResult}.\n   */\n  async sendMessageStream(\n    request: string | Array<string | Part>\n  ): Promise<StreamGenerateContentResult> {\n    const newContent: Content[] =\n      formulateNewContentFromSendMessageRequest(request);\n    const generateContentrequest: GenerateContentRequest = {\n      contents: this.historyInternal.concat(newContent),\n      safetySettings: this.safetySettings,\n      generationConfig: this.generationConfig,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction,\n    };\n\n    const streamGenerateContentResultPromise = generateContentStream(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      generateContentrequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    ).catch(e => {\n      throw e;\n    });\n\n    this.sendStreamPromise = this.appendHistory(\n      streamGenerateContentResultPromise,\n      newContent\n    ).catch(e => {\n      // Errors from remote endpoint will be catchable by user from streamGenerateContentResultPromise\n      // Errors in appendHistory should not throw to cause user's programe exit with code 1\n      console.error(e);\n    });\n    return streamGenerateContentResultPromise;\n  }\n}\n\n/**\n * The `ChatSessionPreview` class is used to make multiturn send message requests. You\n * can instantiate this class by using the `startChat` method in the\n * `GenerativeModelPreview` class. The `sendMessage` method makes an async call to get\n * the response of a chat message at at once. The `sendMessageStream` method\n * makes an async call to stream the response of a chat message as it's being\n * generated.\n */\nexport class ChatSessionPreview {\n  private readonly project: string;\n  private readonly location: string;\n  private historyInternal: Content[];\n  private sendStreamPromise: Promise<void> = Promise.resolve();\n  private readonly resourcePath: string;\n  private readonly googleAuth: GoogleAuth;\n  protected readonly requestOptions?: RequestOptions;\n  private readonly generationConfig?: GenerationConfig;\n  private readonly safetySettings?: SafetySetting[];\n  private readonly tools?: Tool[];\n  private readonly toolConfig?: ToolConfig;\n  private readonly apiEndpoint?: string;\n  private readonly systemInstruction?: Content;\n  private readonly cachedContent?: string;\n\n  async getHistory(): Promise<Content[]> {\n    return Promise.resolve(this.historyInternal);\n  }\n\n  /**\n   * @constructor\n   * @param request - {@link StartChatSessionRequest}\n   */\n  constructor(\n    request: StartChatSessionRequest,\n    requestOptions?: RequestOptions\n  ) {\n    this.project = request.project;\n    this.location = request.location;\n    this.googleAuth = request.googleAuth;\n    this.resourcePath = request.resourcePath;\n    this.historyInternal = request.history ?? [];\n    this.generationConfig = request.generationConfig;\n    this.safetySettings = request.safetySettings;\n    this.tools = request.tools;\n    this.toolConfig = request.toolConfig;\n    this.apiEndpoint = request.apiEndpoint;\n    this.requestOptions = requestOptions ?? {};\n    this.cachedContent = request.cachedContent;\n    if (request.systemInstruction) {\n      this.systemInstruction = formulateSystemInstructionIntoContent(\n        request.systemInstruction\n      );\n    }\n  }\n\n  /**\n   * Gets access token from GoogleAuth. Throws GoogleAuthError when fails.\n   * @returns Promise of token.\n   */\n  private fetchToken(): Promise<string | null | undefined> {\n    const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n      throw new GoogleAuthError(constants.CREDENTIAL_ERROR_MESSAGE, e);\n    });\n    return tokenPromise;\n  }\n\n  /**\n   * Makes an async call to send chat message.\n   *\n   * The response is returned in {@link\n   * GenerateContentResult.response}.\n   *\n   * @example\n   * ```\n   * const chat = generativeModelPreview.startChat();\n   * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n   * console.log('Response: ', JSON.stringify(result1.response));\n   *\n   * const result2 = await chat.sendMessage(\"What about python?\");\n   * console.log('Response: ', JSON.stringify(result2.response));\n   * ```\n   *\n   * @param request - send message request.\n   * @returns Promise of {@link GenerateContentResult}.\n   */\n  async sendMessage(\n    request: string | Array<string | Part>\n  ): Promise<GenerateContentResult> {\n    const newContent: Content[] =\n      formulateNewContentFromSendMessageRequest(request);\n    const generateContentRequest: GenerateContentRequest = {\n      contents: this.historyInternal.concat(newContent),\n      safetySettings: this.safetySettings,\n      generationConfig: this.generationConfig,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction,\n      cachedContent: this.cachedContent,\n    };\n\n    const generateContentResult: GenerateContentResult = await generateContent(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      generateContentRequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    ).catch(e => {\n      throw e;\n    });\n    const generateContentResponse = await generateContentResult.response;\n    // Only push the latest message to history if the response returned a result\n    if (\n      generateContentResponse.candidates &&\n      generateContentResponse.candidates.length !== 0\n    ) {\n      this.historyInternal = this.historyInternal.concat(newContent);\n      const contentFromAssistant =\n        generateContentResponse.candidates[0].content;\n      this.historyInternal.push(contentFromAssistant);\n    }\n\n    return Promise.resolve(generateContentResult);\n  }\n\n  private async appendHistory(\n    streamGenerateContentResultPromise: Promise<StreamGenerateContentResult>,\n    newContent: Content[]\n  ): Promise<void> {\n    const streamGenerateContentResult =\n      await streamGenerateContentResultPromise;\n    const streamGenerateContentResponse =\n      await streamGenerateContentResult.response;\n    // Only push the latest message to history if the response returned a result\n    if (\n      streamGenerateContentResponse.candidates &&\n      streamGenerateContentResponse.candidates.length !== 0\n    ) {\n      this.historyInternal = this.historyInternal.concat(newContent);\n      const contentFromAssistant =\n        streamGenerateContentResponse.candidates[0].content;\n      this.historyInternal.push(contentFromAssistant);\n    }\n  }\n\n  /**\n   * Makes an async call to stream send message.\n   *\n   * The response is streamed chunk by chunk in\n   * {@link StreamGenerateContentResult.stream}. The aggregated response is\n   * avaliable in {@link StreamGenerateContentResult.response} after all chunks\n   * are returned.\n   *\n   * @example\n   * ```\n   * const chat = generativeModel.startChat();\n   * const chatInput = \"How can I learn more about Node.js?\";\n   * const result = await chat.sendMessageStream(chatInput);\n   * for await (const item of result.stream) {\n   *   console.log(item.candidates[0].content.parts[0].text);\n   * }\n   * const response = await result.response;\n   * console.log('aggregated response: ', JSON.stringify(result.response));\n   * ```\n   *\n   * @param request - send message request.\n   * @returns Promise of {@link StreamGenerateContentResult}.\n   */\n  async sendMessageStream(\n    request: string | Array<string | Part>\n  ): Promise<StreamGenerateContentResult> {\n    const newContent: Content[] =\n      formulateNewContentFromSendMessageRequest(request);\n    const generateContentRequest: GenerateContentRequest = {\n      contents: this.historyInternal.concat(newContent),\n      safetySettings: this.safetySettings,\n      generationConfig: this.generationConfig,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction,\n      cachedContent: this.cachedContent,\n    };\n\n    const streamGenerateContentResultPromise = generateContentStream(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      generateContentRequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    ).catch(e => {\n      throw e;\n    });\n\n    this.sendStreamPromise = this.appendHistory(\n      streamGenerateContentResultPromise,\n      newContent\n    ).catch(e => {\n      // Errors from remote endpoint will be catchable by user from streamGenerateContentResultPromise\n      // Errors in appendHistory should not throw to cause user's programe exit with code 1\n      console.error(e);\n    });\n    return streamGenerateContentResultPromise;\n  }\n}\n\nfunction formulateNewContentFromSendMessageRequest(\n  request: string | Array<string | Part>\n): Content[] {\n  let newParts: Part[] = [];\n\n  if (typeof request === 'string') {\n    newParts = [{text: request}];\n  } else if (Array.isArray(request)) {\n    for (const item of request) {\n      if (typeof item === 'string') {\n        newParts.push({text: item});\n      } else {\n        newParts.push(item);\n      }\n    }\n  }\n\n  return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @ignore\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(\n  parts: Array<Part>\n): Content[] {\n  const userContent: Content = {role: constants.USER_ROLE, parts: []};\n  const functionContent: Content = {role: constants.USER_ROLE, parts: []};\n  let hasUserContent = false;\n  let hasFunctionContent = false;\n  for (const part of parts) {\n    if ('functionResponse' in part) {\n      functionContent.parts.push(part);\n      hasFunctionContent = true;\n    } else {\n      userContent.parts.push(part);\n      hasUserContent = true;\n    }\n  }\n\n  if (hasUserContent && hasFunctionContent) {\n    throw new ClientError(\n      'Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.'\n    );\n  }\n\n  if (!hasUserContent && !hasFunctionContent) {\n    throw new ClientError('No content is provided for sending chat message.');\n  }\n\n  if (hasUserContent) {\n    return [userContent];\n  }\n\n  return [functionContent];\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CountTokensRequest,\n  CountTokensResponse,\n  RequestOptions,\n} from '../types/content';\nimport {GoogleGenerativeAIError} from '../types/errors';\nimport * as constants from '../util/constants';\nimport {\n  throwErrorIfNotOK,\n  processCountTokenResponse,\n} from './post_fetch_processing';\nimport {postRequest} from './post_request';\n\n/**\n * Make a async request to count tokens.\n * @param request A CountTokensRequest object with the request contents.\n * @returns The CountTokensResponse object with the token count.\n */\nexport async function countTokens(\n  location: string,\n  resourcePath: string,\n  token: Promise<string | null | undefined>,\n  request: CountTokensRequest,\n  apiEndpoint?: string,\n  requestOptions?: RequestOptions\n): Promise<CountTokensResponse> {\n  const response: Response | undefined = await postRequest({\n    region: location,\n    resourcePath: resourcePath,\n    resourceMethod: constants.COUNT_TOKENS_METHOD,\n    token: await token,\n    data: request,\n    apiEndpoint: apiEndpoint,\n    requestOptions: requestOptions,\n  }).catch(e => {\n    throw new GoogleGenerativeAIError('exception posting request', e);\n  });\n  await throwErrorIfNotOK(response).catch(e => {\n    throw e;\n  });\n  return processCountTokenResponse(response);\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable */\nimport {GoogleAuth} from 'google-auth-library';\n\nimport {formulateSystemInstructionIntoContent} from '../functions/util';\nimport {countTokens} from '../functions/count_tokens';\nimport {\n  generateContent,\n  generateContentStream,\n} from '../functions/generate_content';\nimport {\n  CachedContent,\n  Content,\n  CountTokensRequest,\n  CountTokensResponse,\n  GenerateContentRequest,\n  GenerateContentResult,\n  GenerationConfig,\n  GetGenerativeModelParams,\n  RequestOptions,\n  SafetySetting,\n  StartChatParams,\n  StartChatSessionRequest,\n  StreamGenerateContentResult,\n  Tool,\n} from '../types/content';\nimport {ToolConfig} from '../types/tool';\nimport {ClientError, GoogleAuthError} from '../types/errors';\nimport {constants} from '../util';\n\nimport {ChatSession, ChatSessionPreview} from './chat_session';\n\n/**\n * The `GenerativeModel` class is the base class for the generative models on\n * Vertex AI.\n * NOTE: Don't instantiate this class directly. Use\n * `vertexai.getGenerativeModel()` instead.\n */\nexport class GenerativeModel {\n  private readonly model: string;\n  private readonly generationConfig?: GenerationConfig;\n  private readonly safetySettings?: SafetySetting[];\n  private readonly tools?: Tool[];\n  private readonly toolConfig?: ToolConfig;\n  private readonly requestOptions?: RequestOptions;\n  private readonly systemInstruction?: Content;\n  private readonly project: string;\n  private readonly location: string;\n  private readonly googleAuth: GoogleAuth;\n  private readonly publisherModelEndpoint: string;\n  private readonly resourcePath: string;\n  private readonly apiEndpoint?: string;\n\n  /**\n   * @constructor\n   * @param getGenerativeModelParams - {@link GetGenerativeModelParams}\n   */\n  constructor(getGenerativeModelParams: GetGenerativeModelParams) {\n    this.project = getGenerativeModelParams.project;\n    this.location = getGenerativeModelParams.location;\n    this.apiEndpoint = getGenerativeModelParams.apiEndpoint;\n    this.googleAuth = getGenerativeModelParams.googleAuth;\n    this.model = getGenerativeModelParams.model;\n    this.generationConfig = getGenerativeModelParams.generationConfig;\n    this.safetySettings = getGenerativeModelParams.safetySettings;\n    this.tools = getGenerativeModelParams.tools;\n    this.toolConfig = getGenerativeModelParams.toolConfig;\n    this.requestOptions = getGenerativeModelParams.requestOptions ?? {};\n    if (getGenerativeModelParams.systemInstruction) {\n      this.systemInstruction = formulateSystemInstructionIntoContent(\n        getGenerativeModelParams.systemInstruction\n      );\n    }\n    this.resourcePath = formulateResourcePathFromModel(\n      this.model,\n      this.project,\n      this.location\n    );\n    // publisherModelEndpoint is deprecated\n    this.publisherModelEndpoint = this.resourcePath;\n  }\n\n  /**\n   * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n   * fails.\n   * @returns Promise of token string.\n   */\n  private fetchToken(): Promise<string | null | undefined> {\n    const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n      throw new GoogleAuthError(constants.CREDENTIAL_ERROR_MESSAGE, e);\n    });\n    return tokenPromise;\n  }\n\n  /**\n   * Makes an async call to generate content.\n   *\n   * The response will be returned in {@link\n   * GenerateContentResult.response}.\n   *\n   * @example\n   * ```\n   * const request = {\n   *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n   * };\n   * const result = await generativeModel.generateContent(request);\n   * console.log('Response: ', JSON.stringify(result.response));\n   * ```\n   *\n   * @param request - A GenerateContentRequest object with the request contents.\n   * @returns The GenerateContentResponse object with the response candidates.\n   */\n  async generateContent(\n    request: GenerateContentRequest | string\n  ): Promise<GenerateContentResult> {\n    request = formulateRequestToGenerateContentRequest(request);\n    const formulatedRequest =\n      formulateSystemInstructionIntoGenerateContentRequest(\n        request,\n        this.systemInstruction\n      );\n    return generateContent(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      formulatedRequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Makes an async stream request to generate content.\n   *\n   * The response is returned chunk by chunk as it's being generated in {@link\n   * StreamGenerateContentResult.stream}. After all chunks of the response are\n   * returned, the aggregated response is available in\n   * {@link StreamGenerateContentResult.response}.\n   *\n   * @example\n   * ```\n   * const request = {\n   *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n   * };\n   * const streamingResult = await generativeModel.generateContentStream(request);\n   * for await (const item of streamingResult.stream) {\n   *   console.log('stream chunk: ', JSON.stringify(item));\n   * }\n   * const aggregatedResponse = await streamingResult.response;\n   * console.log('aggregated response: ', JSON.stringify(aggregatedResponse));\n   * ```\n   *\n   * @param request - {@link GenerateContentRequest}\n   * @returns Promise of {@link StreamGenerateContentResult}\n   */\n  async generateContentStream(\n    request: GenerateContentRequest | string\n  ): Promise<StreamGenerateContentResult> {\n    request = formulateRequestToGenerateContentRequest(request);\n    const formulatedRequest =\n      formulateSystemInstructionIntoGenerateContentRequest(\n        request,\n        this.systemInstruction\n      );\n    return generateContentStream(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      formulatedRequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Makes an async request to count tokens.\n   *\n   * The `countTokens` function returns the token count and the number of\n   * billable characters for a prompt.\n   *\n   * @example\n   * ```\n   * const request = {\n   *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n   * };\n   * const resp = await generativeModel.countTokens(request);\n   * console.log('count tokens response: ', resp);\n   * ```\n   *\n   * @param request - A CountTokensRequest object with the request contents.\n   * @returns The CountTokensResponse object with the token count.\n   */\n  async countTokens(request: CountTokensRequest): Promise<CountTokensResponse> {\n    return countTokens(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      request,\n      this.apiEndpoint,\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Instantiates a {@link ChatSession}.\n   *\n   * The {@link ChatSession} class is a stateful class that holds the state of\n   * the conversation with the model and provides methods to interact with the\n   * model in chat mode. Calling this method doesn't make any calls to a remote\n   * endpoint. To make remote call, use {@link ChatSession.sendMessage} or\n   * @link ChatSession.sendMessageStream}.\n   *\n   * @example\n   * ```\n   * const chat = generativeModel.startChat();\n   * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n   * const response1 = await result1.response;\n   * console.log('Response: ', JSON.stringify(response1));\n   *\n   * const result2 = await chat.sendMessageStream(\"What about python?\");\n   * const response2 = await result2.response;\n   * console.log('Response: ', JSON.stringify(await response2));\n   * ```\n   *\n   * @param request - {@link StartChatParams}\n   * @returns {@link ChatSession}\n   */\n  startChat(request?: StartChatParams): ChatSession {\n    const startChatRequest: StartChatSessionRequest = {\n      project: this.project,\n      location: this.location,\n      googleAuth: this.googleAuth,\n      publisherModelEndpoint: this.publisherModelEndpoint,\n      resourcePath: this.resourcePath,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction,\n    };\n\n    if (request) {\n      startChatRequest.history = request.history;\n      startChatRequest.generationConfig =\n        request.generationConfig ?? this.generationConfig;\n      startChatRequest.safetySettings =\n        request.safetySettings ?? this.safetySettings;\n      startChatRequest.tools = request.tools ?? this.tools;\n      startChatRequest.toolConfig = request.toolConfig ?? this.toolConfig;\n      startChatRequest.apiEndpoint = request.apiEndpoint ?? this.apiEndpoint;\n      startChatRequest.systemInstruction =\n        request.systemInstruction ?? this.systemInstruction;\n    }\n    return new ChatSession(startChatRequest, this.requestOptions);\n  }\n}\n\n/**\n * The `GenerativeModelPreview` class is the base class for the generative models\n * that are in preview.\n * NOTE: Don't instantiate this class directly. Use\n * `vertexai.preview.getGenerativeModel()` instead.\n */\nexport class GenerativeModelPreview {\n  private readonly model: string;\n  private readonly generationConfig?: GenerationConfig;\n  private readonly safetySettings?: SafetySetting[];\n  private readonly tools?: Tool[];\n  private readonly toolConfig?: ToolConfig;\n  private readonly requestOptions?: RequestOptions;\n  private readonly systemInstruction?: Content;\n  private readonly project: string;\n  private readonly location: string;\n  private readonly googleAuth: GoogleAuth;\n  private readonly publisherModelEndpoint: string;\n  private readonly resourcePath: string;\n  private readonly apiEndpoint?: string;\n  private readonly cachedContent?: CachedContent;\n\n  /**\n   * @constructor\n   * @param getGenerativeModelParams - {@link GetGenerativeModelParams}\n   */\n  constructor(getGenerativeModelParams: GetGenerativeModelParams) {\n    this.project = getGenerativeModelParams.project;\n    this.location = getGenerativeModelParams.location;\n    this.apiEndpoint = getGenerativeModelParams.apiEndpoint;\n    this.googleAuth = getGenerativeModelParams.googleAuth;\n    this.model = getGenerativeModelParams.model;\n    this.generationConfig = getGenerativeModelParams.generationConfig;\n    this.safetySettings = getGenerativeModelParams.safetySettings;\n    this.tools = getGenerativeModelParams.tools;\n    this.toolConfig = getGenerativeModelParams.toolConfig;\n    this.cachedContent = getGenerativeModelParams.cachedContent;\n    this.requestOptions = getGenerativeModelParams.requestOptions ?? {};\n    if (getGenerativeModelParams.systemInstruction) {\n      this.systemInstruction = formulateSystemInstructionIntoContent(\n        getGenerativeModelParams.systemInstruction\n      );\n    }\n    this.resourcePath = formulateResourcePathFromModel(\n      this.model,\n      this.project,\n      this.location\n    );\n    // publisherModelEndpoint is deprecated\n    this.publisherModelEndpoint = this.resourcePath;\n  }\n\n  /**\n   * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n   * fails.\n   * @returns Promise of token string.\n   */\n  private fetchToken(): Promise<string | null | undefined> {\n    const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n      throw new GoogleAuthError(constants.CREDENTIAL_ERROR_MESSAGE, e);\n    });\n    return tokenPromise;\n  }\n\n  /**\n   * Makes an async call to generate content.\n   *\n   * The response will be returned in {@link GenerateContentResult.response}.\n   *\n   * @example\n   * ```\n   * const request = {\n   *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n   * };\n   * const result = await generativeModelPreview.generateContent(request);\n   * console.log('Response: ', JSON.stringify(result.response));\n   * ```\n   *\n   * @param request - A GenerateContentRequest object with the request contents.\n   * @returns The GenerateContentResponse object with the response candidates.\n   */\n  async generateContent(\n    request: GenerateContentRequest | string\n  ): Promise<GenerateContentResult> {\n    request = formulateRequestToGenerateContentRequest(request);\n    const formulatedRequest = {\n      ...formulateSystemInstructionIntoGenerateContentRequest(\n        request,\n        this.systemInstruction\n      ),\n      cachedContent: this.cachedContent?.name,\n    };\n    return generateContent(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      formulatedRequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Makes an async stream request to generate content.\n   *\n   * The response is returned chunk by chunk as it's being generated in {@link\n   * StreamGenerateContentResult.stream}. After all chunks of the response are\n   * returned, the aggregated response is available in\n   * {@link StreamGenerateContentResult.response}.\n   *\n   * @example\n   * ```\n   * const request = {\n   *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n   * };\n   * const streamingResult = await generativeModelPreview.generateContentStream(request);\n   * for await (const item of streamingResult.stream) {\n   *   console.log('stream chunk: ', JSON.stringify(item));\n   * }\n   * const aggregatedResponse = await streamingResult.response;\n   * console.log('aggregated response: ', JSON.stringify(aggregatedResponse));\n   * ```\n   *\n   * @param request - {@link GenerateContentRequest}\n   * @returns Promise of {@link StreamGenerateContentResult}\n   */\n  async generateContentStream(\n    request: GenerateContentRequest | string\n  ): Promise<StreamGenerateContentResult> {\n    request = formulateRequestToGenerateContentRequest(request);\n    const formulatedRequest = {\n      ...formulateSystemInstructionIntoGenerateContentRequest(\n        request,\n        this.systemInstruction\n      ),\n      cachedContent: this.cachedContent?.name,\n    };\n    return generateContentStream(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      formulatedRequest,\n      this.apiEndpoint,\n      this.generationConfig,\n      this.safetySettings,\n      this.tools,\n      this.toolConfig,\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Makes an async request to count tokens.\n   *\n   * The `countTokens` function returns the token count and the number of\n   * billable characters for a prompt.\n   *\n   * @example\n   * ```\n   * const request = {\n   *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n   * };\n   * const resp = await generativeModelPreview.countTokens(request);\n   * console.log('count tokens response: ', resp);\n   * ```\n   *\n   * @param request - A CountTokensRequest object with the request contents.\n   * @returns The CountTokensResponse object with the token count.\n   */\n  async countTokens(request: CountTokensRequest): Promise<CountTokensResponse> {\n    return countTokens(\n      this.location,\n      this.resourcePath,\n      this.fetchToken(),\n      request,\n      this.apiEndpoint,\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Instantiates a {@link ChatSessionPreview}.\n   *\n   * The {@link ChatSessionPreview} class is a stateful class that holds the state of\n   * the conversation with the model and provides methods to interact with the\n   * model in chat mode. Calling this method doesn't make any calls to a remote\n   * endpoint. To make remote call, use {@link ChatSessionPreview.sendMessage} or\n   * {@link ChatSessionPreview.sendMessageStream}.\n   *\n   * @example\n   * ```\n   * const chat = generativeModelPreview.startChat();\n   * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n   * const response1 = await result1.response;\n   * console.log('Response: ', JSON.stringify(response1));\n   *\n   * const result2 = await chat.sendMessageStream(\"What about python?\");\n   * const response2 = await result2.response;\n   * console.log('Response: ', JSON.stringify(await response2));\n   * ```\n   *\n   * @param request - {@link StartChatParams}\n   * @returns {@link ChatSessionPreview}\n   */\n  startChat(request?: StartChatParams): ChatSessionPreview {\n    const startChatRequest: StartChatSessionRequest = {\n      project: this.project,\n      location: this.location,\n      googleAuth: this.googleAuth,\n      publisherModelEndpoint: this.publisherModelEndpoint,\n      resourcePath: this.resourcePath,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction,\n      cachedContent: this.cachedContent?.name,\n    };\n\n    if (request) {\n      startChatRequest.history = request.history;\n      startChatRequest.generationConfig =\n        request.generationConfig ?? this.generationConfig;\n      startChatRequest.safetySettings =\n        request.safetySettings ?? this.safetySettings;\n      startChatRequest.tools = request.tools ?? this.tools;\n      startChatRequest.toolConfig = request.toolConfig ?? this.toolConfig;\n      startChatRequest.systemInstruction =\n        request.systemInstruction ?? this.systemInstruction;\n      startChatRequest.cachedContent =\n        request.cachedContent ?? this.cachedContent?.name;\n    }\n    return new ChatSessionPreview(startChatRequest, this.requestOptions);\n  }\n\n  getModelName(): string {\n    return this.model;\n  }\n\n  getCachedContent(): CachedContent | undefined {\n    return this.cachedContent;\n  }\n\n  getSystemInstruction(): Content | undefined {\n    return this.systemInstruction;\n  }\n}\n\nfunction formulateResourcePathFromModel(\n  model: string,\n  project: string,\n  location: string\n): string {\n  let resourcePath: string;\n  if (!model) {\n    throw new ClientError('model parameter must not be empty.');\n  }\n  if (!model.includes('/')) {\n    // example 'gemini-1.0-pro'\n    resourcePath = `projects/${project}/locations/${location}/publishers/google/models/${model}`;\n  } else if (model.startsWith('models/')) {\n    // example 'models/gemini-1.0-pro'\n    resourcePath = `projects/${project}/locations/${location}/publishers/google/${model}`;\n  } else if (model.startsWith('projects/')) {\n    // example 'projects/my-project/locations/my-location/models/my-tuned-model'\n    resourcePath = model;\n  } else {\n    throw new ClientError(\n      'model parameter must be either a Model Garden model ID or a full resource name.'\n    );\n  }\n\n  return resourcePath;\n}\n\nfunction formulateRequestToGenerateContentRequest(\n  request: GenerateContentRequest | string\n): GenerateContentRequest {\n  if (typeof request === 'string') {\n    return {\n      contents: [{role: constants.USER_ROLE, parts: [{text: request}]}],\n    } as GenerateContentRequest;\n  }\n  return request;\n}\n\nfunction formulateSystemInstructionIntoGenerateContentRequest(\n  methodRequest: GenerateContentRequest,\n  classSystemInstruction?: Content\n): GenerateContentRequest {\n  if (methodRequest.systemInstruction) {\n    methodRequest.systemInstruction = formulateSystemInstructionIntoContent(\n      methodRequest.systemInstruction\n    );\n    return methodRequest;\n  }\n  if (classSystemInstruction) {\n    methodRequest.systemInstruction = classSystemInstruction;\n  }\n  return methodRequest;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {ChatSession, ChatSessionPreview} from './chat_session';\nexport {GenerativeModel, GenerativeModelPreview} from './generative_models';\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** This file contains interfaces that are usable in the types folder. */\n\n/**\n * The list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n */\nexport enum SchemaType {\n  /** String type. */\n  STRING = 'STRING',\n  /** Number type. */\n  NUMBER = 'NUMBER',\n  /** Integer type. */\n  INTEGER = 'INTEGER',\n  /** Boolean type. */\n  BOOLEAN = 'BOOLEAN',\n  /** Array type. */\n  ARRAY = 'ARRAY',\n  /** Object type. */\n  OBJECT = 'OBJECT',\n}\n\n/**\n * Schema is used to define the format of input/output data.\n * Represents a select subset of an OpenAPI 3.0 schema object.\n * More fields may be added in the future as needed.\n */\nexport interface Schema {\n  /**\n   * Optional. The type of the property. {@link\n   * SchemaType}.\n   */\n  type?: SchemaType;\n  /** Optional. The format of the property. */\n  format?: string;\n  /** Optional. The description of the property. */\n  description?: string;\n  /** Optional. Whether the property is nullable. */\n  nullable?: boolean;\n  /** Optional. The items of the property. {@link Schema} */\n  items?: Schema;\n  /** Optional. The enum of the property. */\n  enum?: string[];\n  /** Optional. Map of {@link Schema}. */\n  properties?: {[k: string]: Schema};\n  /** Optional. Array of required property. */\n  required?: string[];\n  /** Optional. The example of the property. */\n  example?: unknown;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// @ts-nocheck\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport {ToolConfig} from './tool';\nimport {SchemaType, Schema} from './common';\n\n/**\n * Params used to initialize the Vertex SDK.\n */\nexport declare interface VertexInit {\n  /**\n   * Optional. The Google Cloud project ID. It is not the numeric project name.\n   * If not provided, SDK will try to resolve it from runtime environment.\n   * If still not cannot resovle project ID, SDK will throw exception.\n   */\n  project?: string;\n  /**\n   * Optional. The Google Cloud project location. If not provided, SDK will\n   * firtly try to resolve it from runtime environment. If no location resolved\n   * from runtime environment, SDK will use default value `us-central1`.\n   */\n  location?: string;\n  /**\n   * Optional. The base Vertex AI endpoint to use for the request. If not\n   * provided, the default regionalized endpoint (i.e.\n   * us-central1-aiplatform.googleapis.com) will be used.\n   */\n  apiEndpoint?: string;\n  /**\n   * Optional. The Authentication options provided by google-auth-library.\n   * Complete list of authentication options is documented in the\n   * GoogleAuthOptions interface:\n   * https://github.com/googleapis/google-auth-library-nodejs/blob/main/src/auth/googleauth.ts.\n   */\n  googleAuthOptions?: GoogleAuthOptions;\n}\n\n/**\n * Params used to call the generateContent method.\n */\nexport declare interface GenerateContentRequest extends BaseModelParams {\n  /** Array of {@link Content}.*/\n  contents: Content[];\n  /**\n   * Optional. The user provided system instructions for the model.\n   * Note: only text should be used in parts of {@link Content}\n   */\n  systemInstruction?: string | Content;\n\n  /**\n   * Optional. The name of the cached content used as context to serve the prediction.\n   * This is the name of a `CachedContent` and not the cache object itself.\n   */\n  cachedContent?: string;\n}\n\n/**\n * Params used to call the countTokens method.\n */\nexport declare interface CountTokensRequest {\n  /** Array of {@link Content}. */\n  contents: Content[];\n}\n\n/**\n * Response returned from countTokens method.\n */\nexport declare interface CountTokensResponse {\n  /**\n   * The total number of tokens counted across all instances from the request.\n   */\n  totalTokens: number;\n  /**\n   * Optional. The total number of billable characters counted across all\n   * instances from the request.\n   */\n  totalBillableCharacters?: number;\n}\n\n/**\n * Params used to call the getGenerativeModel method.\n */\nexport declare interface GetGenerativeModelParams extends ModelParams {\n  /** The name of the model to get. */\n  model: string;\n  /** The Google Cloud project to use for the request. */\n  project: string;\n  /** The Google Cloud project location to use for the request. */\n  location: string;\n  /**\n   * GoogleAuth class instance that handles authentication.\n   * Details about GoogleAuth is referred to\n   * https://github.com/googleapis/google-auth-library-nodejs/blob/main/src/auth/googleauth.ts\n   */\n  googleAuth: GoogleAuth;\n  /**\n   * Optional. The base Vertex AI endpoint to use for the request. If not\n   * provided, the default regionalized endpoint (i.e.\n   * us-central1-aiplatform.googleapis.com) will be used.\n   */\n  apiEndpoint?: string;\n  /** Optional. The configuration to use for generation. */\n  generationConfig?: GenerationConfig;\n  /** Optional. The safety settings to use for generation. */\n  safetySettings?: SafetySetting[];\n  /** Optional. The tools to use for generation. */\n  tools?: Tool[];\n  /** Optional. This config is shared for all tools provided in the request. */\n  toolConfig?: ToolConfig;\n  /** Optional. The request options to use for generation. */\n  requestOptions?: RequestOptions;\n  /**\n   * Optional. The user provided system instructions for the model.\n   * Note: only text should be used in parts of {@link Content}\n   */\n  systemInstruction?: string | Content;\n}\n\n/**\n * Configuration for initializing a model, for example via getGenerativeModel in\n * VertexAI class.\n */\nexport declare interface ModelParams extends BaseModelParams {\n  /**\n   * The name of the model.\n   * @example \"gemini-1.0-pro\".\n   */\n  model: string;\n\n  /**\n   * Optional. The cached content used as context to serve the prediction.\n   * Note: only used in explicit caching, where users can have control over caching\n   * (e.g. what content to cache) and enjoy guaranteed cost savings.\n   */\n  cachedContent?: CachedContent;\n}\n\n/**\n * Base params for initializing a model or calling GenerateContent.\n */\nexport declare interface BaseModelParams {\n  /** Optional. Array of {@link SafetySetting}. */\n  safetySettings?: SafetySetting[];\n  /** Optional.  {@link GenerationConfig}. */\n  generationConfig?: GenerationConfig;\n  /** Optional. Array of {@link Tool}. */\n  tools?: Tool[];\n  /** Optional. This config is shared for all tools provided in the request. */\n  toolConfig?: ToolConfig;\n  /**\n   * Optional. The user provided system instructions for the model.\n   * Note: only text should be used in parts of {@link Content}\n   */\n  systemInstruction?: string | Content;\n}\n\n/**\n * Safety feedback for an entire request.\n */\nexport declare interface SafetySetting {\n  /** The harm category. {@link HarmCategory} */\n  category: HarmCategory;\n  /** The harm threshold. {@link HarmBlockThreshold} */\n  threshold: HarmBlockThreshold;\n}\n\n/**\n * Schema passed to `GenerationConfig.responseSchema`\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ResponseSchema extends Schema {}\n\n/**\n * Configuration options for model generation and outputs.\n */\nexport declare interface GenerationConfig {\n  /** Optional. If true, the timestamp of the audio will be included in the response. */\n  audioTimestamp?: boolean;\n  /** Optional. Number of candidates to generate. */\n  candidateCount?: number;\n  /** Optional. Stop sequences. */\n  stopSequences?: string[];\n  /** Optional. The maximum number of output tokens to generate per message. */\n  maxOutputTokens?: number;\n  /** Optional. Controls the randomness of predictions. */\n  temperature?: number;\n  /** Optional. If specified, nucleus sampling will be used. */\n  topP?: number;\n  /** Optional. If specified, topK sampling will be used. */\n  topK?: number;\n  /**\n   * Optional. Positive values penalize tokens that repeatedly appear in the generated text, decreasing the probability of repeating content.\n   * This maximum value for frequencyPenalty is up to, but not including, 2.0. Its minimum value is -2.0.\n   * Supported by gemini-1.5-pro and gemini-1.5-flash only. */\n  frequencyPenalty?: number;\n  /**\n   * Optional. Output response mimetype of the generated candidate text.\n   * Supported mimetype:\n   * - `text/plain`: (default) Text output.\n   * - `application/json`: JSON response in the candidates.\n   * The model needs to be prompted to output the appropriate response type,\n   * otherwise the behavior is undefined.\n   */\n  responseMimeType?: string;\n\n  /**\n   * Optional. The schema that generated candidate text must follow.  For more\n   * information, see\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output.\n   * If set, a compatible responseMimeType must also be set.\n   */\n  responseSchema?: ResponseSchema;\n}\n\n/**\n * Harm categories that will block the content.\n */\nexport enum HarmCategory {\n  /** The harm category is unspecified. */\n  HARM_CATEGORY_UNSPECIFIED = 'HARM_CATEGORY_UNSPECIFIED',\n  /** The harm category is hate speech. */\n  HARM_CATEGORY_HATE_SPEECH = 'HARM_CATEGORY_HATE_SPEECH',\n  /** The harm category is dangerous content. */\n  HARM_CATEGORY_DANGEROUS_CONTENT = 'HARM_CATEGORY_DANGEROUS_CONTENT',\n  /** The harm category is harassment. */\n  HARM_CATEGORY_HARASSMENT = 'HARM_CATEGORY_HARASSMENT',\n  /** The harm category is sexually explicit content. */\n  HARM_CATEGORY_SEXUALLY_EXPLICIT = 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n}\n\n/**\n * Probability based thresholds levels for blocking.\n */\nexport enum HarmBlockThreshold {\n  /** Unspecified harm block threshold. */\n  HARM_BLOCK_THRESHOLD_UNSPECIFIED = 'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n  /** Block low threshold and above (i.e. block more). */\n  BLOCK_LOW_AND_ABOVE = 'BLOCK_LOW_AND_ABOVE',\n  /** Block medium threshold and above. */\n  BLOCK_MEDIUM_AND_ABOVE = 'BLOCK_MEDIUM_AND_ABOVE',\n  /** Block only high threshold (i.e. block less). */\n  BLOCK_ONLY_HIGH = 'BLOCK_ONLY_HIGH',\n  /** Block none. */\n  BLOCK_NONE = 'BLOCK_NONE',\n}\n\n/**\n * Harm probability levels in the content.\n */\nexport enum HarmProbability {\n  /** Harm probability unspecified. */\n  HARM_PROBABILITY_UNSPECIFIED = 'HARM_PROBABILITY_UNSPECIFIED',\n  NEGLIGIBLE = 'NEGLIGIBLE',\n  /** Low level of harm. */\n  LOW = 'LOW',\n  /** Medium level of harm. */\n  MEDIUM = 'MEDIUM',\n  /** High level of harm. */\n  HIGH = 'HIGH',\n}\n\n/**\n * Harm severity levels\n */\nexport enum HarmSeverity {\n  /** Harm severity unspecified. */\n  HARM_SEVERITY_UNSPECIFIED = 'HARM_SEVERITY_UNSPECIFIED',\n  /** Negligible level of harm severity. */\n  HARM_SEVERITY_NEGLIGIBLE = 'HARM_SEVERITY_NEGLIGIBLE',\n  /** Low level of harm severity. */\n  HARM_SEVERITY_LOW = 'HARM_SEVERITY_LOW',\n  /** Medium level of harm severity. */\n  HARM_SEVERITY_MEDIUM = 'HARM_SEVERITY_MEDIUM',\n  /** High level of harm severity. */\n  HARM_SEVERITY_HIGH = 'HARM_SEVERITY_HIGH',\n}\n/**\n * Safety rating corresponding to the generated content.\n */\nexport declare interface SafetyRating {\n  /** The harm category. {@link HarmCategory} */\n  category?: HarmCategory;\n  /** The harm probability. {@link HarmProbability} */\n  probability?: HarmProbability;\n  /** The harm probability score. */\n  probabilityScore?: number;\n  /** The harm severity.level {@link HarmSeverity} */\n  severity?: HarmSeverity;\n  /** The harm severity score. */\n  severityScore?: number;\n}\n\n/**\n * The base structured datatype containing multi-part content of a message.\n */\nexport declare interface Content {\n  /** Array of {@link Part}. */\n  parts: Part[];\n  /** The producer of the content. */\n  role: string;\n}\n\n/**\n * A part of a turn in a conversation with the model with a fixed MIME type.\n * It has one of the following mutually exclusive fields:\n * 1. text\n * 2. inlineData\n * 3. fileData\n * 4. functionResponse\n * 5. functionCall\n */\n// TODO: Adjust so one must be true.\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BasePart {}\n\n/**\n * A text part of a conversation with the model.\n */\nexport interface TextPart extends BasePart {\n  /** Only this property is expected for TextPart. */\n  text: string;\n  /** inlineData is not expected for TextPart. */\n  inlineData?: never;\n  /** fileData is not expected for TextPart. */\n  fileData?: never;\n  /** functionResponse is not expected for TextPart. */\n  functionResponse?: never;\n  /** functionCall is not expected for TextPart. */\n  functionCall?: never;\n}\n\n/**\n * An inline data part of a conversation with the model.\n */\nexport interface InlineDataPart extends BasePart {\n  /** text is not expected for InlineDataPart. */\n  text?: never;\n  /** Only this property is expected for InlineDataPart. */\n  inlineData: GenerativeContentBlob;\n  /** fileData is not expected for InlineDataPart. */\n  fileData?: never;\n  /** functionResponse is not expected for InlineDataPart. */\n  functionResponse?: never;\n  /** functionCall is not expected for InlineDataPart. */\n  functionCall?: never;\n}\n\n/**\n * URI based data.\n */\nexport interface FileData {\n  /** The IANA standard MIME type of the source data. */\n  mimeType: string;\n  /** URI of the file. */\n  fileUri: string;\n}\n\n/**\n * A file data part of a conversation with the model.\n */\nexport interface FileDataPart extends BasePart {\n  /** text is not expected for FileDataPart. */\n  text?: never;\n  /** inlineData is not expected for FileDataPart. */\n  inlineData?: never;\n  /** Only this property is expected for FileDataPart. */\n  fileData: FileData;\n  /** functionResponse is not expected for FileDataPart. */\n  functionResponse?: never;\n  /** functionCall is not expected for FileDataPart. */\n  functionCall?: never;\n}\n\n/**\n * A function response part of a conversation with the model.\n */\nexport interface FunctionResponsePart extends BasePart {\n  /** text is not expected for FunctionResponsePart. */\n  text?: never;\n  /** inlineData is not expected for FunctionResponsePart. */\n  inlineData?: never;\n  /** fileData is not expected for FunctionResponsePart. */\n  fileData?: never;\n  /** Only this property is expected for FunctionResponsePart. */\n  functionResponse: FunctionResponse;\n  /** functionCall is not expected for FunctionResponsePart. */\n  functionCall?: never;\n}\n\n/**\n * A function call part of a conversation with the model.\n */\nexport interface FunctionCallPart extends BasePart {\n  /** text is not expected for FunctionCallPart. */\n  text?: never;\n  /** inlineData is not expected for FunctionCallPart. */\n  inlineData?: never;\n  /** fileData is not expected for FunctionCallPart. */\n  fileData?: never;\n  /** functionResponse is not expected for FunctionCallPart. */\n  functionResponse?: never;\n  /** Only this property is expected for FunctionCallPart. */\n  functionCall: FunctionCall;\n}\n\n/**\n * A datatype containing media that is part of a multi-part {@link Content}\n * message. A `Part` is a union type of {@link TextPart}, {@link InlineDataPart},\n * {@link FileDataPart}, and {@link FunctionResponsePart}. A\n * `Part` has one of the following mutually exclusive fields:\n * 1. text\n * 2. inlineData\n * 3. fileData\n * 4. functionResponse\n */\nexport declare type Part =\n  | TextPart\n  | InlineDataPart\n  | FileDataPart\n  | FunctionResponsePart\n  | FunctionCallPart;\n\n/**\n * Raw media bytes sent directly in the request. Text should not be sent as\n * raw bytes.\n */\nexport declare interface GenerativeContentBlob {\n  /**\n   * The MIME type of the source data. The only accepted values: \"image/png\" or\n   * \"image/jpeg\".\n   */\n  mimeType: string;\n  /** Base64 encoded data. */\n  data: string;\n}\n\n/**\n * Usage metadata about response(s).\n */\nexport declare interface UsageMetadata {\n  /** Optional. Number of tokens in the request. */\n  promptTokenCount?: number;\n  /** Optional. Number of tokens in the response(s). */\n  candidatesTokenCount?: number;\n  /** Optional. Total number of tokens. */\n  totalTokenCount?: number;\n  /** Optional. Number of tokens in the cached content. */\n  cachedContentTokenCount?: number;\n}\n\n/**\n * Content filter results for a prompt sent in the request.\n */\nexport declare interface PromptFeedback {\n  /** The reason why the response is blocked. {@link BlockReason}. */\n  blockReason: BlockedReason;\n  /** Array of {@link SafetyRating} */\n  safetyRatings: SafetyRating[];\n  /** A readable block reason message. */\n  blockReasonMessage?: string;\n}\n\n/**\n * The reason why the reponse is blocked.\n */\nexport enum BlockedReason {\n  /** Unspecified blocked reason. */\n  BLOCKED_REASON_UNSPECIFIED = 'BLOCK_REASON_UNSPECIFIED',\n  /** Candidates blocked due to safety. */\n  SAFETY = 'SAFETY',\n  /** Candidates blocked due to other reason. */\n  OTHER = 'OTHER',\n  /** terminology blocklist. */\n  BLOCKLIST = 'BLOCKLIST',\n  /** Candidates blocked due to prohibited content. */\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT',\n}\n\n/**\n * The reason why the model stopped generating tokens.\n * If empty, the model has not stopped generating the tokens.\n */\nexport enum FinishReason {\n  /** The finish reason is unspecified. */\n  FINISH_REASON_UNSPECIFIED = 'FINISH_REASON_UNSPECIFIED',\n  /** Natural stop point of the model or provided stop sequence. */\n  STOP = 'STOP',\n  /** The maximum number of tokens as specified in the request was reached. */\n  MAX_TOKENS = 'MAX_TOKENS',\n  /**\n   * The token generation was stopped as the response was flagged for safety\n   * reasons.\n   */\n  SAFETY = 'SAFETY',\n  /**\n   * The token generation was stopped as the response was flagged for\n   * unauthorized citations.\n   */\n  RECITATION = 'RECITATION',\n  /** All other reasons that stopped the token generation. */\n  OTHER = 'OTHER',\n  /**\n   * The token generation was stopped as the response was flagged for the\n   * terms which are included from the terminology blocklist.\n   */\n  BLOCKLIST = 'BLOCKLIST',\n  /**\n   * The token generation was stopped as the response was flagged for\n   * the prohibited contents.\n   */\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT',\n  /**\n   * The token generation was stopped as the response was flagged for\n   * Sensitive Personally Identifiable Information (SPII) contents.\n   */\n  SPII = 'SPII',\n}\n\n/**\n * Wrapper for respones from a generateContent request.\n */\nexport declare interface GenerateContentResult {\n  /**\n   * All GenerateContentResponses received so far. {@link\n   * GenerateContentResponse}\n   */\n  response: GenerateContentResponse;\n}\n\n/**\n * Wrapper for respones from a generateContentStream method.\n */\nexport declare interface StreamGenerateContentResult {\n  /** Promise of {@link GenerateContentResponse}. */\n  response: Promise<GenerateContentResponse>;\n  /**\n   * Async iterable that provides one {@link GenerateContentResponse} at a\n   * time.\n   */\n  stream: AsyncGenerator<GenerateContentResponse>;\n}\n\n/**\n * Response from the model supporting multiple candidates.\n */\nexport declare interface GenerateContentResponse {\n  /** Array of {@link GenerateContentCandidate}. */\n  candidates?: GenerateContentCandidate[];\n  /**\n   * Optional. This is only populated if there are no candidates due to a\n   * safety block. {@link PromptFeedback}.\n   */\n  promptFeedback?: PromptFeedback;\n  /** Optional. {@link UsageMetadata}. */\n  usageMetadata?: UsageMetadata;\n}\n\n/**\n * A response candidate generated from the model.\n */\nexport declare interface GenerateContentCandidate {\n  /** {@link Content}. */\n  content: Content;\n  /**\n   * Optional. The index of the candidate in the {@link\n   * GenerateContentResponse}.\n   */\n  index: number;\n  /**\n   * Optional. The reason why the model stopped generating tokens. {@link\n   * FinishReason}.\n   */\n  finishReason?: FinishReason;\n  /**\n   * Optional. A readable message describing why the model stopped generating\n   * tokens.\n   */\n  finishMessage?: string;\n  /** Optional. Array of {@link SafetyRating}. */\n  safetyRatings?: SafetyRating[];\n  /** Optional. {@link CitationMetadata}. */\n  citationMetadata?: CitationMetadata;\n  /** Optional. {@link GroundingMetadata}. */\n  groundingMetadata?: GroundingMetadata;\n}\n\n/**\n * A collection of source attributions for a piece of content.\n */\nexport declare interface CitationMetadata {\n  /** Array of {@link Citation}. */\n  citations: Citation[];\n}\n\n/**\n * Represents a whole or partial calendar date, such as a birthday. The time of\n * day and time zone are either specified elsewhere or are insignificant. The\n * date is relative to the Gregorian Calendar. This can represent one of the\n * following:\n *\n *   A full date, with non-zero year, month, and day values.\n *   A month and day, with a zero year (for example, an anniversary).\n *   A year on its own, with a zero month and a zero day.\n *   A year and month, with a zero day (for example, a credit card expiration\n *   date).\n */\nexport declare interface GoogleDate {\n  /**\n   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a\n   * year.\n   */\n  year?: number;\n  /**\n   * Month of the date. Must be from 1 to 12, or 0 to specify a year without a\n   * monthi and day.\n   */\n  month?: number;\n  /**\n   * Day of the date. Must be from 1 to 31 and valid for the year and month.\n   * or 0 to specify a year by itself or a year and month where the day isn't\n   * significant\n   */\n  day?: number;\n}\n\n/**\n * Source attributions for content.\n */\nexport declare interface Citation {\n  /** Optional. Start index into the content. */\n  startIndex?: number;\n  /** Optional. End index into the content. */\n  endIndex?: number;\n  /** Optional. Url reference of the attribution. */\n  uri?: string;\n  /** Optional. Title of the attribution. */\n  title?: string;\n  /** Optional. License of the attribution. */\n  license?: string;\n  /** Optional. Publication date of the attribution. */\n  publicationDate?: GoogleDate;\n}\n\n/**\n * Google search entry point.\n */\nexport declare interface SearchEntryPoint {\n  /**\n   * Optional. Web content snippet that can be embedded in a web page or an app\n   * webview.\n   */\n  renderedContent?: string;\n  /** Optional. Base64 encoded JSON representing array of tuple. */\n  sdkBlob?: string;\n}\n\n/**\n * Grounding chunk from the web.\n */\nexport declare interface GroundingChunkWeb {\n  /** Optional. URI reference of the grounding chunk. */\n  uri?: string;\n  /** Optional. Title of the grounding chunk. */\n  title?: string;\n}\n\n/**\n * Grounding chunk from context retrieved by the retrieval tools.\n */\nexport declare interface GroundingChunkRetrievedContext {\n  /** Optional. URI reference of the attribution. */\n  uri?: string;\n  /** Optional. Title of the attribution. */\n  title?: string;\n}\n\n/**\n * Grounding chunk.\n */\nexport declare interface GroundingChunk {\n  /** Optional. Grounding chunk from the web. */\n  web?: GroundingChunkWeb;\n  /**\n   * Optional. Grounding chunk from context retrieved by the retrieval tools.\n   */\n  retrievedContext?: GroundingChunkRetrievedContext;\n}\n\n/**\n * Grounding support segment.\n */\nexport declare interface GroundingSupportSegment {\n  /** Optional. The index of a Part object within its parent Content object. */\n  partIndex?: number;\n  /**\n   * Optional. Start index in the given Part, measured in bytes.\n   * Offset from the start of the Part, inclusive, starting at zero.\n   */\n  startIndex?: number;\n  /**\n   * Optional. End index in the given Part, measured in bytes.\n   * Offset from the start of the Part, exclusive, starting at zero.\n   */\n  endIndex?: number;\n  /** Optional. The text corresponding to the segment from the response. */\n  text?: string;\n}\n\n/**\n * Grounding support.\n */\nexport declare interface GroundingSupport {\n  /** Optional. Segment of the content this support belongs to. */\n  segment?: GroundingSupportSegment;\n  /**\n   * Optional. A arrau of indices (into {@link GroundingChunk}) specifying the\n   * citations associated with the claim. For instance [1,3,4] means\n   * that grounding_chunk[1], grounding_chunk[3],\n   * grounding_chunk[4] are the retrieved content attributed to the claim.\n   */\n  groundingChunkIndices?: number[];\n  /**\n   * Confidence score of the support references. Ranges from 0 to 1. 1 is the\n   * most confident. This list must have the same size as the\n   * groundingChunkIndices.\n   */\n  confidenceScores?: number[];\n}\n\n/**\n * A collection of grounding attributions for a piece of content.\n */\nexport declare interface GroundingMetadata {\n  /** Optional. Web search queries for the following-up web search. */\n  webSearchQueries?: string[];\n  /** Optional. Queries executed by the retrieval tools. */\n  retrievalQueries?: string[];\n  /** Optional. Google search entry for the following-up web searches. {@link SearchEntryPoint} */\n  searchEntryPoint?: SearchEntryPoint;\n  /**\n   * Optional. Array of supporting references retrieved from specified\n   * grounding source. {@link GroundingChunk}.\n   */\n  groundingChunks?: GroundingChunk[];\n  /** Optional. Array of grounding support. {@link GroundingSupport}. */\n  groundingSupports?: GroundingSupport[];\n}\n\n/**\n * @deprecated\n * Segment of the content this attribution belongs to.\n */\nexport declare interface GroundingAttributionSegment {\n  /** Optional. The index of a Part object within its parent Content object. */\n  partIndex?: number;\n  /**\n   * Optional. Start index in the given Part, measured in bytes. Offset from the\n   * start of the Part, inclusive, starting at zero.\n   */\n  startIndex?: number;\n  /**\n   * Optional. End index in the given Part, measured in bytes. Offset from the\n   * start of the Part, exclusive, starting at zero.\n   */\n  endIndex?: number;\n}\n\n/**\n * @deprecated\n * Attribution from the web.\n */\nexport declare interface GroundingAttributionWeb {\n  /** Optional. URI reference of the attribution. */\n  uri?: string;\n  /** Optional. Title of the attribution. */\n  title?: string;\n}\n\n/**\n * @deprecated\n * Attribution from context retrieved by the retrieval tools.\n */\nexport declare interface GroundingAttributionRetrievedContext {\n  /** Optional. URI reference of the attribution. */\n  uri?: string;\n  /** Optional. Title of the attribution. */\n  title?: string;\n}\n\n/**\n * A predicted FunctionCall returned from the model that contains a string\n * representating the FunctionDeclaration.name with the parameters and their\n * values.\n */\nexport declare interface FunctionCall {\n  /** The name of the function specified in FunctionDeclaration.name. */\n  name: string;\n  /** The arguments to pass to the function. */\n  args: object;\n}\n\n/**\n * The result output of a FunctionCall that contains a string representing\n * the FunctionDeclaration.name and a structured JSON object containing any\n * output from the function call. It is used as context to the model.\n */\nexport declare interface FunctionResponse {\n  /** The name of the function specified in FunctionDeclaration.name. */\n  name: string;\n  /** The expected response from the model. */\n  response: object;\n}\n\n/**\n * Structured representation of a function declaration as defined by the\n * [OpenAPI 3.0 specification](https://spec.openapis.org/oas/v3.0.3). Included\n * in this declaration are the function name and parameters. This\n * FunctionDeclaration is a representation of a block of code that can be used\n * as a Tool by the model and executed by the client.\n */\nexport declare interface FunctionDeclaration {\n  /**\n   * The name of the function to call. Must start with a letter or an\n   * underscore. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with\n   * a max length of 64.\n   */\n  name: string;\n  /**\n   * Optional. Description and purpose of the function. Model uses it to decide\n   * how and whether to call the function.\n   */\n  description?: string;\n  /**\n   * Optional. Describes the parameters to this function in JSON Schema Object\n   * format. Reflects the Open API 3.03 Parameter Object. string Key: the name\n   * of the parameter. Parameter names are case sensitive. Schema Value: the\n   * Schema defining the type used for the parameter. For function with no\n   * parameters, this can be left unset.\n   *\n   * @example with 1 required and 1 optional parameter: type: OBJECT properties:\n   * ```\n   * param1:\n   *\n   *   type: STRING\n   * param2:\n   *\n   *  type: INTEGER\n   * required:\n   *\n   *   - param1\n   * ```\n   */\n  parameters?: FunctionDeclarationSchema;\n}\n\n/**\n * A FunctionDeclarationsTool is a piece of code that enables the system to\n * interact with external systems to perform an action, or set of actions,\n * outside of knowledge and scope of the model.\n */\nexport declare interface FunctionDeclarationsTool {\n  /**\n   * Optional. One or more function declarations\n   * to be passed to the model along with the current user query. Model may\n   * decide to call a subset of these functions by populating\n   * [FunctionCall][content.part.functionCall] in the response. User should\n   * provide a [FunctionResponse][content.part.functionResponse] for each\n   * function call in the next turn. Based on the function responses, Model will\n   * generate the final response back to the user. Maximum 64 function\n   * declarations can be provided.\n   */\n  functionDeclarations?: FunctionDeclaration[];\n}\n\n/**\n * Defines a retrieval tool that model can call to access external knowledge.\n */\nexport declare interface RetrievalTool {\n  /** Optional. {@link Retrieval}. */\n  retrieval?: Retrieval;\n}\n\nexport declare interface VertexRagStore {\n  /**\n   * Optional. List of corpora for retrieval. Currently only support one corpus\n   * or multiple files from one corpus. In the future we may open up multiple\n   * corpora support.\n   */\n  ragResources?: RagResource[];\n\n  /** Optional. Number of top k results to return from the selected corpora. */\n  similarityTopK?: number;\n\n  /**\n   * Optional. If set this field, results with vector distance smaller than\n   * this threshold will be returned.\n   */\n  vectorDistanceThreshold?: number;\n}\n\n/**\n * Config of Vertex RagStore grounding checking.\n */\nexport declare interface RagResource {\n  /**\n   * Optional. Vertex RAG Store corpus resource name.\n   *\n   * @example\n   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`\n   */\n  ragCorpus?: string;\n\n  /**\n   * Optional. Set this field to select the files under the ragCorpora for\n   * retrieval.\n   */\n  ragFileIds?: string[];\n}\n\n/**\n * Defines a retrieval tool that model can call to access external knowledge.\n */\nexport declare interface GoogleSearchRetrievalTool {\n  /** Optional. {@link GoogleSearchRetrieval}. */\n  googleSearchRetrieval?: GoogleSearchRetrieval;\n}\n\n/** Defines a tool that model can call to access external knowledge. */\nexport declare type Tool =\n  | FunctionDeclarationsTool\n  | RetrievalTool\n  | GoogleSearchRetrievalTool;\n\n/**\n * Defines a retrieval tool that model can call to access external knowledge.\n */\nexport declare interface Retrieval {\n  /**\n   * Optional. Set to use data source powered by Vertex AI Search. {@link\n   * VertexAISearch}.\n   */\n  vertexAiSearch?: VertexAISearch;\n\n  /** Optional. Set to use data source powered by Vertex RAG store. */\n  vertexRagStore?: VertexRagStore;\n\n  /**\n   * Optional. Disable using the result from this tool in detecting grounding\n   * attribution. This does not affect how the result is given to the model for\n   * generation.\n   */\n  disableAttribution?: boolean;\n}\n\nexport enum Mode {\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  MODE_DYNAMIC = 'MODE_DYNAMIC',\n}\n\n/** Describes the options to customize dynamic retrieval. */\nexport declare interface DynamicRetrievalConfig {\n  /** Optional. The threshold to be used in dynamic retrieval. If not set, a system default value is used. */\n  dynamicThreshold?: number;\n  /** The mode of the predictor to be used in dynamic retrieval. */\n  mode?: Mode;\n}\n\n/**\n * Tool to retrieve public web data for grounding, powered by Google.\n */\nexport declare interface GoogleSearchRetrieval {\n  /** Specifies the dynamic retrieval configuration for the given source. */\n  dynamicRetrievalConfig?: DynamicRetrievalConfig;\n}\n\n/**\n * Retrieve from Vertex AI Search datastore for grounding.\n */\nexport declare interface VertexAISearch {\n  /**\n   * Fully-qualified Vertex AI Search's datastore resource ID. See\n   * https://cloud.google.com/vertex-ai-search-and-conversation\n   *\n   * @example\n   * \"projects/<>/locations/<>/collections/<>/dataStores/<>\"\n   */\n  datastore: string;\n}\n\n/**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n */\nexport declare type FunctionDeclarationSchemaType = SchemaType;\nexport const FunctionDeclarationSchemaType = {...SchemaType};\n\n/**\n * Schema for parameters passed to {@link FunctionDeclaration.parameters}.\n */\nexport interface FunctionDeclarationSchema {\n  /** The type of the parameter. */\n  type: SchemaType;\n  /** The format of the parameter. */\n  properties: {[k: string]: FunctionDeclarationSchemaProperty};\n  /** Optional. Description of the parameter. */\n  description?: string;\n  /** Optional. Array of required parameters. */\n  required?: string[];\n}\n\n/**\n * FunctionDeclarationSchemaProperty is used to define the format of\n * input/output data. Represents a select subset of an OpenAPI 3.0 schema object.\n * More fields may be added in the future as needed.\n */\nexport type FunctionDeclarationSchemaProperty = Schema;\n\n/**\n * Params to initiate a multiturn chat with the model via startChat.\n */\nexport declare interface StartChatParams {\n  /** Optional. History of the chat session. {@link Content} */\n  history?: Content[];\n  /** Optional. Array of {@link SafetySetting}. */\n  safetySettings?: SafetySetting[];\n  /** Optional. {@link GenerationConfig}. */\n  generationConfig?: GenerationConfig;\n  /** Optional. Array of {@link Tool}. */\n  tools?: Tool[];\n  /** Optional. This config is shared for all tools provided in the request. */\n  toolConfig?: ToolConfig;\n  /** Optional. The base Vertex AI endpoint to use for the request. */\n  apiEndpoint?: string;\n  /**\n   * Optional. The user provided system instructions for the model.\n   * Note: only text should be used in parts of {@link Content}\n   */\n  systemInstruction?: string | Content;\n  /**\n   * Optional. The name of the cached content used as context to serve the prediction.\n   * This is the name of a `CachedContent` and not the cache object itself.\n   */\n  cachedContent?: string;\n}\n\n/**\n * All params passed to initiate multiturn chat via startChat.\n */\nexport declare interface StartChatSessionRequest extends StartChatParams {\n  /** The Google Cloud project to use for the request. */\n  project: string;\n  /** The Google Cloud project location to use for the request. */\n  location: string;\n  /** The Google Auth to use for the request. */\n  googleAuth: GoogleAuth;\n  /** The publisher model endpoint to use for the request. */\n  publisherModelEndpoint: string;\n  /** The resource path to use for the request. */\n  resourcePath: string;\n  /**\n   * Optional. The user provided system instructions for the model.\n   * Note: only text should be used in parts of {@link Content}\n   */\n  systemInstruction?: string | Content;\n}\n\n/**\n * Request options params passed to getGenerativeModel method in VertexAI class.\n */\nexport interface RequestOptions {\n  /** timeout in milli seconds. time out value needs to be non negative. */\n  timeout?: number;\n  /**\n   * Value for x-goog-api-client header to set on the API request. This is\n   * intended for wrapper SDKs to set additional SDK identifiers for the\n   * backend.\n   */\n  apiClient?: string;\n  /**\n   * Value for custom HTTP headers to set on the HTTP request.\n   */\n  customHeaders?: Headers;\n}\n\n/**\n * A resource used in LLM queries for users to explicitly specify\n * what to cache and how to cache.\n */\nexport interface CachedContent {\n  /**\n   * Immutable. Identifier. The server-generated resource name of the cached content.\n   * Format: projects/{project}/locations/{location}/cachedContents/{cached_content}\n   */\n  name?: string;\n\n  /** Optional. Immutable. The user-generated meaningful display name of the cached content. */\n  displayName?: string;\n\n  /**\n   * Immutable. The name of the publisher model to use for cached content.\n   * Format: projects/{project}/locations/{location}/publishers/{publisher}/models/{model}\n   */\n  model?: string;\n\n  /** Developer set system instruction. Currently, text only. */\n  systemInstruction?: Content | string;\n\n  /** Optional. Input only. Immutable. The content to cache. */\n  contents?: Content[];\n\n  /** Optional. Input only. Immutable. A list of `Tools` the model may use to generate the next response. */\n  tools?: Tool[];\n\n  /** Optional. Input only. Immutable. Tool config. This config is shared for all tools. */\n  toolConfig?: ToolConfig;\n\n  /**\n   * Output only. Creatation time of the cache entry.\n   * Format: google-datetime. See {@link https://cloud.google.com/docs/discovery/type-format}\n   */\n  createTime?: string;\n\n  /**\n   * Output only. When the cache entry was last updated in UTC time.\n   * Format: google-datetime. See {@link https://cloud.google.com/docs/discovery/type-format}\n   */\n  updateTime?: string;\n\n  /** Output only. Metadata on the usage of the cached content. */\n  usageMetadata?: CachedContentUsageMetadata;\n\n  /**\n   * Timestamp of when this resource is considered expired.\n   * This is *always* provided on output, regardless of what was sent on input.\n   */\n  expireTime?: string;\n\n  /**\n   * Input only. The TTL seconds for this resource. The expiration time\n   * is computed: now + TTL.\n   * Format: google-duration. See {@link https://cloud.google.com/docs/discovery/type-format}\n   */\n  ttl?: string;\n}\n\n/** Metadata on the usage of the cached content. */\nexport interface CachedContentUsageMetadata {\n  /** Total number of tokens that the cached content consumes. */\n  totalTokenCount?: number;\n\n  /** Number of text characters. */\n  textCount?: number;\n\n  /** Number of images. */\n  imageCount?: number;\n\n  /** Duration of video in seconds. */\n  videoDurationSeconds?: number;\n\n  /** Duration of audio in seconds. */\n  audioDurationSeconds?: number;\n}\n\n/** Response with a list of CachedContents. */\nexport interface ListCachedContentsResponse {\n  /** List of cached contents. */\n  cachedContents?: CachedContent[];\n  /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */\n  nextPageToken?: string;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** This config is shared for all tools provided in the request. */\nexport interface ToolConfig {\n  /** Function calling config. */\n  functionCallingConfig?: FunctionCallingConfig;\n}\n\n/** Function calling mode. */\nexport enum FunctionCallingMode {\n  /** Unspecified function calling mode. This value should not be used. */\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  /**\n   * Default model behavior, model decides to predict either function calls\n   * or natural language response.\n   */\n  AUTO = 'AUTO',\n  /**\n   * Model is constrained to always predicting function calls only.\n   * If \"allowedFunctionNames\" are set, the predicted function calls will be\n   * limited to any one of \"allowedFunctionNames\", else the predicted\n   * function calls will be any one of the provided \"function_declarations\".\n   */\n  ANY = 'ANY',\n  /**\n   * Model will not predict any function calls. Model behavior is same as when\n   * not passing any function declarations.\n   */\n  NONE = 'NONE',\n}\n\nexport interface FunctionCallingConfig {\n  /** Optional. Function calling mode. */\n  mode?: FunctionCallingMode;\n\n  /**\n   * Optional. Function names to call. Only set when the Mode is ANY. Function\n   * names should match [FunctionDeclaration.name]. With mode set to ANY, model\n   * will predict a function call from the set of function names provided.\n   */\n  allowedFunctionNames?: string[];\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {GenerateContentCandidate, FunctionCall, Part} from './content';\n\n/** Helper class to render any extra properties out of\n * {@link GenerateContentResponse} or properties of {@link GenerateContentResponse}\n */\nexport class GenerateContentResponseHandler {\n  /**\n   * Extracts function calls from a {@link GenerateContentCandidate}.\n   *\n   * @param candidate - The candidate to extract function calls from.\n   * @returns the array of function calls in a {@link GenerateContentCandidate}.\n   */\n  static getFunctionCallsFromCandidate(\n    candidate?: GenerateContentCandidate\n  ): FunctionCall[] {\n    if (!candidate) return [] as FunctionCall[];\n    return candidate.content.parts\n      .filter((part: Part | undefined) => !!part && !!part.functionCall)\n      .map((part: Part) => part.functionCall!);\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './content';\nexport * from './errors';\nexport * from './tool';\nexport * from './common';\nexport {GenerateContentResponseHandler} from './generate_content_response_handler';\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {formulateSystemInstructionIntoContent} from '../functions/util';\nimport {ClientError} from '../types';\nimport {CachedContent, ListCachedContentsResponse} from '../types';\nimport {ApiClient} from './shared/api_client';\n\nfunction camelToSnake(str: string): string {\n  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n}\n\nclass CachedContentsClient {\n  constructor(readonly apiClient: ApiClient) {}\n\n  create(cachedContent: CachedContent): Promise<CachedContent> {\n    return this.apiClient.unaryApiCall(\n      new URL(\n        this.apiClient.getBaseUrl() +\n          '/' +\n          this.apiClient.getBaseResourePath() +\n          '/cachedContents'\n      ),\n      {\n        body: JSON.stringify(cachedContent),\n      },\n      'POST'\n    );\n  }\n\n  update(\n    cachedContent: CachedContent,\n    updateMask: string[]\n  ): Promise<CachedContent> {\n    const url = new URL(this.apiClient.getBaseUrl() + '/' + cachedContent.name);\n    url.searchParams.append(\n      'updateMask',\n      updateMask.map(e => camelToSnake(e)).join(',')\n    );\n    return this.apiClient.unaryApiCall(\n      url,\n      {\n        body: JSON.stringify(cachedContent),\n      },\n      'PATCH'\n    );\n  }\n\n  delete(name: string): Promise<void> {\n    return this.apiClient.unaryApiCall(\n      new URL(this.apiClient.getBaseUrl() + '/' + name),\n      {},\n      'DELETE'\n    );\n  }\n\n  list(\n    pageSize?: number,\n    pageToken?: string\n  ): Promise<ListCachedContentsResponse> {\n    const url = new URL(\n      this.apiClient.getBaseUrl() +\n        '/' +\n        this.apiClient.getBaseResourePath() +\n        '/cachedContents'\n    );\n    if (pageSize) url.searchParams.append('pageSize', String(pageSize));\n    if (pageToken) url.searchParams.append('pageToken', pageToken);\n    return this.apiClient.unaryApiCall(url, {}, 'GET');\n  }\n\n  get(name: string): Promise<CachedContent> {\n    return this.apiClient.unaryApiCall(\n      new URL(this.apiClient.getBaseUrl() + '/' + name),\n      {},\n      'GET'\n    );\n  }\n}\n\nexport function inferFullResourceName(\n  project: string,\n  location: string,\n  cachedContentId: string\n): string {\n  if (cachedContentId.startsWith('projects/')) {\n    return cachedContentId;\n  }\n  if (cachedContentId.startsWith('locations/')) {\n    return `projects/${project}/${cachedContentId}`;\n  }\n  if (cachedContentId.startsWith('cachedContents/')) {\n    return `projects/${project}/locations/${location}/${cachedContentId}`;\n  }\n  if (!cachedContentId.includes('/')) {\n    return `projects/${project}/locations/${location}/cachedContents/${cachedContentId}`;\n  }\n  throw new ClientError(\n    `Invalid CachedContent.name: ${cachedContentId}. CachedContent.name should start with 'projects/', 'locations/', 'cachedContents/' or is a number type.`\n  );\n}\n\n/**\n * Infers the full model name based on the provided project, location, and model.\n *\n * @internal\n */\nexport function inferModelName(\n  project: string,\n  location: string,\n  model?: string\n) {\n  if (!model) {\n    throw new ClientError('Model name is required.');\n  }\n  if (model.startsWith('publishers/')) {\n    return `projects/${project}/locations/${location}/${model}`;\n  }\n  if (!model.startsWith('projects/')) {\n    return `projects/${project}/locations/${location}/publishers/google/models/${model}`;\n  }\n  return model;\n}\n\n/**\n * This class is for managing Vertex AI's CachedContent resource.\n * @public\n */\nexport class CachedContents {\n  private readonly client: CachedContentsClient;\n  constructor(client: ApiClient) {\n    this.client = new CachedContentsClient(client);\n  }\n\n  /**\n   * Creates cached content, this call will initialize the cached content in the data storage, and users need to pay for the cache data storage.\n   * @param cachedContent\n   * @param parent - Required. The parent resource where the cached content will be created.\n   */\n  create(cachedContent: CachedContent): Promise<CachedContent> {\n    const curatedCachedContent = {\n      ...cachedContent,\n      systemInstruction: cachedContent.systemInstruction\n        ? formulateSystemInstructionIntoContent(cachedContent.systemInstruction)\n        : undefined,\n      model: inferModelName(\n        this.client.apiClient.project,\n        this.client.apiClient.location,\n        cachedContent.model\n      ),\n    } as CachedContent;\n    return this.client.create(curatedCachedContent);\n  }\n\n  /**\n   * Updates cached content configurations\n   *\n   * @param updateMask - Required. The list of fields to update. Format: google-fieldmask. See {@link https://cloud.google.com/docs/discovery/type-format}\n   * @param name - Immutable. Identifier. The server-generated resource name of the cached content Format: projects/{project}/locations/{location}/cachedContents/{cached_content}.\n   */\n  update(\n    cachedContent: CachedContent,\n    updateMask: string[]\n  ): Promise<CachedContent> {\n    if (!cachedContent.name) {\n      throw new ClientError('Cached content name is required for update.');\n    }\n    if (!updateMask || updateMask.length === 0) {\n      throw new ClientError(\n        'Update mask is required for update. Fields set in cachedContent but not in updateMask will be ignored. Examples: [\"ttl\"] or [\"expireTime\"].'\n      );\n    }\n    const curatedCachedContent = {\n      ...cachedContent,\n      systemInstruction: cachedContent.systemInstruction\n        ? formulateSystemInstructionIntoContent(cachedContent.systemInstruction)\n        : undefined,\n      name: inferFullResourceName(\n        this.client.apiClient.project,\n        this.client.apiClient.location,\n        cachedContent.name\n      ),\n    };\n    return this.client.update(curatedCachedContent, updateMask);\n  }\n\n  /**\n   * Deletes cached content.\n   *\n   * @param name - Required. The resource name referring to the cached content.\n   */\n  delete(name: string): Promise<void> {\n    return this.client.delete(\n      inferFullResourceName(\n        this.client.apiClient.project,\n        this.client.apiClient.location,\n        name\n      )\n    );\n  }\n\n  /**\n   * Lists cached contents in a project.\n   *\n   * @param pageSize - Optional. The maximum number of cached contents to return. The service may return fewer than this value. If unspecified, some default (under maximum) number of items will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.\n   * @param pageToken - Optional. A page token, received from a previous `ListCachedContents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCachedContents` must match the call that provided the page token.\n   */\n  list(\n    pageSize?: number,\n    pageToken?: string\n  ): Promise<ListCachedContentsResponse> {\n    return this.client.list(pageSize, pageToken);\n  }\n\n  /**\n   * Gets cached content configurations.\n   *\n   * @param name - Required. The resource name referring to the cached content.\n   */\n  get(name: string): Promise<CachedContent> {\n    return this.client.get(\n      inferFullResourceName(\n        this.client.apiClient.project,\n        this.client.apiClient.location,\n        name\n      )\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {GoogleAuth} from 'google-auth-library';\nimport {constants} from '../../util';\nimport {\n  ClientError,\n  GoogleApiError,\n  GoogleAuthError,\n  GoogleGenerativeAIError,\n} from '../../types';\n\nconst AUTHORIZATION_HEADER = 'Authorization';\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst USER_AGENT_HEADER = 'User-Agent';\n\nexport class ApiClient {\n  constructor(\n    readonly project: string,\n    readonly location: string,\n    readonly apiVersion: 'v1' | 'v1beta1',\n    private readonly googleAuth: GoogleAuth\n  ) {}\n\n  /**\n   * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n   * fails.\n   * @returns Promise of token string.\n   */\n  private fetchToken(): Promise<string | null | undefined> {\n    const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n      throw new GoogleAuthError(constants.CREDENTIAL_ERROR_MESSAGE, e);\n    });\n    return tokenPromise;\n  }\n\n  getBaseUrl() {\n    return `https://${this.location}-aiplatform.googleapis.com/${this.apiVersion}`;\n  }\n\n  getBaseResourePath() {\n    return `projects/${this.project}/locations/${this.location}`;\n  }\n\n  async unaryApiCall(\n    url: URL,\n    requestInit: RequestInit,\n    httpMethod: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n  ): Promise<any> {\n    const token = await this.getHeaders();\n    return this.apiCall(url.toString(), {\n      ...requestInit,\n      method: httpMethod,\n      headers: token,\n    });\n  }\n\n  private async apiCall(\n    url: string,\n    requestInit: RequestInit\n  ): Promise<Response> {\n    const response = await fetch(url, requestInit).catch(e => {\n      throw new GoogleGenerativeAIError(\n        `exception sending request to url: ${url} with requestInit: ${JSON.stringify(requestInit)}}`,\n        e\n      );\n    });\n    await throwErrorIfNotOK(response, url, requestInit).catch(e => {\n      throw e;\n    });\n    try {\n      return await response.json();\n    } catch (e) {\n      throw new GoogleGenerativeAIError(JSON.stringify(response), e as Error);\n    }\n  }\n\n  private async getHeaders(): Promise<Headers> {\n    const token = await this.fetchToken();\n    return new Headers({\n      [AUTHORIZATION_HEADER]: `Bearer ${token}`,\n      [CONTENT_TYPE_HEADER]: 'application/json',\n      [USER_AGENT_HEADER]: constants.USER_AGENT,\n    });\n  }\n}\n\nasync function throwErrorIfNotOK(\n  response: Response | undefined,\n  url: string,\n  requestInit: RequestInit\n) {\n  if (response === undefined) {\n    throw new GoogleGenerativeAIError('response is undefined');\n  }\n  if (!response.ok) {\n    const status: number = response.status;\n    const statusText: string = response.statusText;\n    let errorBody;\n    if (response.headers.get('content-type')?.includes('application/json')) {\n      errorBody = await response.json();\n    } else {\n      errorBody = {\n        error: {\n          message: `exception sending request to url: ${url} with requestInit: ${JSON.stringify(requestInit)}}`,\n          code: response.status,\n          status: response.statusText,\n        },\n      };\n    }\n    const errorMessage = `got status: ${status} ${statusText}. ${JSON.stringify(\n      errorBody\n    )}`;\n    if (status >= 400 && status < 500) {\n      const error = new ClientError(\n        errorMessage,\n        new GoogleApiError(\n          errorBody.error.message,\n          errorBody.error.code,\n          errorBody.error.status,\n          errorBody.error.details\n        )\n      );\n      throw error;\n    }\n    throw new GoogleGenerativeAIError(errorMessage);\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {CachedContents} from './cached_contents';\nexport {ApiClient} from './shared/api_client';\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable */\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\n\nimport {GenerativeModelPreview, GenerativeModel} from './models';\nimport {\n  CachedContent,\n  GetGenerativeModelParams,\n  ModelParams,\n  RequestOptions,\n  VertexInit,\n} from './types/content';\nimport {\n  GoogleAuthError,\n  IllegalArgumentError,\n  ClientError,\n} from './types/errors';\nimport * as Resources from './resources';\nimport {inferFullResourceName} from './resources/cached_contents';\n\n/**\n * The `VertexAI` class is the base class for authenticating to Vertex AI.\n * To use Vertex AI's generative AI models, use the `getGenerativeModel` method.\n * To use generative AI features that are in Preview, use the `preview`\n * namespace.\n */\nexport class VertexAI {\n  public readonly preview: VertexAIPreview;\n  private readonly project: string;\n  private readonly location: string;\n  private readonly googleAuth: GoogleAuth;\n  private readonly apiEndpoint?: string;\n\n  /**\n   * @constructor\n   * @param init - assign authentication related information,\n   *     including the project and location strings, to instantiate a Vertex AI\n   * client.\n   * @throws {IllegalArgumentError}\n\n   */\n  constructor(init: VertexInit) {\n    const opts = validateGoogleAuthOptions(\n      init.project,\n      init.googleAuthOptions\n    );\n    this.location = resolveLocation(init.location);\n    this.project = resolveProject(init.project);\n    this.googleAuth = new GoogleAuth(opts);\n    this.apiEndpoint = init.apiEndpoint;\n    this.preview = new VertexAIPreview(\n      this.project,\n      this.location,\n      this.googleAuth,\n      this.apiEndpoint\n    );\n  }\n\n  /**\n   * Gets the GenerativeModel class instance.\n   *\n   * This method creates a new instance of the `GenerativeModel` class with the\n   * platform initialization parameters provided in {@link VertexInit} and model\n   * initialization parameters provided in {@link ModelParams}. You can\n   * optionally provide {@link RequestOptions} to override the default request\n   * options.\n   *\n   * @example\n   * ```\n   * const project = 'your-cloud-project';\n   * const location = 'us-central1';\n   * const textModel =  'gemini-1.0-pro';\n   * const visionModel = 'gemini-1.0-pro-vision';\n   *\n   * const vertexAI = new VertexAI({project: project, location: location});\n   *\n   * // Instantiate models\n   * const generativeModel = vertexAI.getGenerativeModel({\n   *   model: textModel,\n   *   // The following parameters are optional\n   *   // They can also be passed to individual content generation requests\n   *   safetySettings: [{\n   *                      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n   *                      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n   *                     }],\n   *   generationConfig: {maxOutputTokens: 256},\n   * });\n   *\n   * const generativeVisionModel = vertexAI.getGenerativeModel({\n   *   model: visionModel,\n   * });\n   *\n   * const generativeModelPreview = vertexAI.preview.getGenerativeModel({\n   *   model: textModel,\n   * });\n   * ```\n   *\n   * @param modelParams - {@link ModelParams} Parameters to\n   *     specify the generative model.\n   * @param requestOptions - {@link RequestOptions} Parameters to specify\n   *     request options\n   * @returns Instance of the GenerativeModel class.\n   */\n  getGenerativeModel(\n    modelParams: ModelParams,\n    requestOptions?: RequestOptions\n  ): GenerativeModel {\n    const getGenerativeModelParams: GetGenerativeModelParams = {\n      model: modelParams.model,\n      project: this.project,\n      location: this.location,\n      googleAuth: this.googleAuth,\n      apiEndpoint: this.apiEndpoint,\n      safetySettings: modelParams.safetySettings,\n      generationConfig: modelParams.generationConfig,\n      tools: modelParams.tools,\n      toolConfig: modelParams.toolConfig,\n      requestOptions: requestOptions,\n      systemInstruction: modelParams.systemInstruction,\n    };\n    return new GenerativeModel(getGenerativeModelParams);\n  }\n\n  protected getProject(): string {\n    return this.project;\n  }\n\n  protected getLocation(): string {\n    return this.location;\n  }\n}\n\n/**\n * The preview namespace for VertexAI. Users invoke the `getGenerativeModel`\n * method to start using generative AI features that are in preview.\n */\nclass VertexAIPreview {\n  private readonly project: string;\n  private readonly location: string;\n  private readonly googleAuth: GoogleAuth;\n  private readonly apiEndpoint?: string;\n\n  private readonly apiClient: Resources.ApiClient;\n  readonly cachedContents: Resources.CachedContents;\n\n  /**\n   * @constructor\n   * @param project - The Google Cloud project to use for the request\n   * @param location - location The Google Cloud project location to use for the\n   *     request\n   * @param googleAuth - The GoogleAuthen class instance from\n   *     google-auth-library.\n   *        Complete list of authentication options is documented in the\n   * GoogleAuthOptions interface:\n   *        https://github.com/googleapis/google-auth-library-nodejs/blob/main/src/auth/googleauth.ts\n   * @param apiEndpoint - [apiEndpoint] The base Vertex AI endpoint to use for\n   *     the request. If\n   *        not provided, the default regionalized endpoint\n   *        (i.e. us-central1-aiplatform.googleapis.com) will be used.\n   */\n  constructor(\n    project: string,\n    location: string,\n    googleAuth: GoogleAuth,\n    apiEndpoint?: string\n  ) {\n    this.project = project;\n    this.location = location;\n    this.googleAuth = googleAuth;\n    this.apiEndpoint = apiEndpoint;\n\n    this.apiClient = new Resources.ApiClient(\n      this.project,\n      this.location,\n      'v1beta1',\n      this.googleAuth\n    );\n    this.cachedContents = new Resources.CachedContents(this.apiClient);\n  }\n\n  /**\n   * @param modelParams - {@link ModelParams} Parameters to\n   *     specify the generative model.\n   * @returns Instance of the GenerativeModelPreview class.\n   */\n  getGenerativeModel(\n    modelParams: ModelParams,\n    requestOptions?: RequestOptions\n  ): GenerativeModelPreview {\n    const getGenerativeModelParams: GetGenerativeModelParams = {\n      model: modelParams.model,\n      project: this.project,\n      location: this.location,\n      googleAuth: this.googleAuth,\n      apiEndpoint: this.apiEndpoint,\n      safetySettings: modelParams.safetySettings,\n      generationConfig: modelParams.generationConfig,\n      tools: modelParams.tools,\n      toolConfig: modelParams.toolConfig,\n      requestOptions: requestOptions,\n      systemInstruction: modelParams.systemInstruction,\n    };\n    return new GenerativeModelPreview(getGenerativeModelParams);\n  }\n\n  getGenerativeModelFromCachedContent(\n    cachedContent: CachedContent,\n    modelParams?: Partial<ModelParams>,\n    requestOptions?: RequestOptions\n  ) {\n    if (!cachedContent.name) {\n      throw new ClientError('Cached content must contain a `name` field.');\n    }\n    if (!cachedContent.model) {\n      throw new ClientError('Cached content must contain a `model` field.');\n    }\n    validateCachedContentModel(cachedContent.model);\n    /**\n     * Not checking tools and toolConfig for now as it would require a deep\n     * equality comparison and isn't likely to be a common case.\n     */\n    const disallowedDuplicates: Array<keyof ModelParams & keyof CachedContent> =\n      ['model', 'systemInstruction'];\n\n    for (const key of disallowedDuplicates) {\n      if (\n        modelParams?.[key] &&\n        cachedContent[key] &&\n        modelParams?.[key] !== cachedContent[key]\n      ) {\n        if (key === 'model') {\n          const modelParamsComp = parseModelName(modelParams[key]!);\n          const cachedContentComp = parseModelName(cachedContent[key]!);\n          if (modelParamsComp === cachedContentComp) {\n            continue;\n          }\n        }\n        throw new ClientError(\n          `Different value for \"${key}\" specified in modelParams` +\n            ` (${modelParams[key]}) and cachedContent (${cachedContent[key]})`\n        );\n      }\n    }\n\n    cachedContent.name = inferFullResourceName(\n      this.project,\n      this.location,\n      cachedContent.name\n    );\n    const modelParamsFromCache: GetGenerativeModelParams = {\n      model: cachedContent.model,\n      project: this.project,\n      location: this.location,\n      googleAuth: this.googleAuth,\n      apiEndpoint: this.apiEndpoint,\n      safetySettings: modelParams?.safetySettings,\n      generationConfig: modelParams?.generationConfig,\n      tools: cachedContent.tools,\n      toolConfig: cachedContent.toolConfig,\n      requestOptions: requestOptions,\n      systemInstruction: cachedContent.systemInstruction,\n      cachedContent,\n    };\n    return new GenerativeModelPreview(modelParamsFromCache);\n  }\n}\n\nfunction validateCachedContentModel(modelName: string) {\n  if (\n    modelName.startsWith('models/') ||\n    (modelName.startsWith('projects/') &&\n      modelName.includes('/publishers/google/models/')) ||\n    !modelName.includes('/')\n  ) {\n    return;\n  }\n  throw new ClientError(\n    `Cached content model name must start with \"models/\" or match \"projects/.*/publishers/google/models/.*\" or is a model name listed at https://cloud.google.com/vertex-ai/generative-ai/docs/learn/model-versions. Received: ${modelName}`\n  );\n}\n\nfunction parseModelName(modelName: string): string {\n  if (!modelName.includes('/')) {\n    return modelName;\n  }\n  return modelName.split('/').pop()!;\n}\n\nfunction validateGoogleAuthOptions(\n  project?: string,\n  googleAuthOptions?: GoogleAuthOptions\n): GoogleAuthOptions {\n  let opts: GoogleAuthOptions;\n  const requiredScope = 'https://www.googleapis.com/auth/cloud-platform';\n  if (!googleAuthOptions) {\n    opts = {\n      scopes: requiredScope,\n    };\n    return opts;\n  }\n  if (googleAuthOptions.projectId && googleAuthOptions.projectId !== project) {\n    throw new Error(\n      `inconsistent project ID values. argument project got value ${project} but googleAuthOptions.projectId got value ${googleAuthOptions.projectId}`\n    );\n  }\n  opts = googleAuthOptions;\n  if (!opts.scopes) {\n    opts.scopes = requiredScope;\n    return opts;\n  }\n  if (\n    (typeof opts.scopes === 'string' && opts.scopes !== requiredScope) ||\n    (Array.isArray(opts.scopes) && opts.scopes.indexOf(requiredScope) < 0)\n  ) {\n    throw new GoogleAuthError(\n      `input GoogleAuthOptions.scopes ${opts.scopes} doesn't contain required scope ${requiredScope}, please include ${requiredScope} into GoogleAuthOptions.scopes or leave GoogleAuthOptions.scopes undefined`\n    );\n  }\n  return opts;\n}\n\nfunction resolveProject(projectFromInput?: string): string {\n  const projectNotFoundErrorMessage =\n    'Unable to infer your project.' +\n    'Please provide a project Id by one of the following:' +\n    '\\n- Passing a constructor argument by using new VertexAI({project: my-project})' +\n    '\\n- Setting project using `gcloud config set project my-project`';\n  if (projectFromInput) {\n    return projectFromInput;\n  }\n  const inferredProjectFromEnv = process.env['GOOGLE_CLOUD_PROJECT'];\n  if (inferredProjectFromEnv) {\n    return inferredProjectFromEnv;\n  }\n  throw new IllegalArgumentError(projectNotFoundErrorMessage);\n}\n\nfunction resolveLocation(locationFromInput?: string): string {\n  if (locationFromInput) {\n    return locationFromInput;\n  }\n  const inferredLocation =\n    process.env['GOOGLE_CLOUD_REGION'] || process.env['CLOUD_ML_REGION'];\n  if (inferredLocation) {\n    return inferredLocation;\n  }\n  return 'us-central1';\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {VertexAI} from './vertex_ai';\nexport * from './types';\nexport * from './models';\n"],
  "mappings": "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",
  "names": ["SchemaType", "HarmCategory", "HarmBlockThreshold", "HarmProbability", "HarmSeverity", "BlockedReason", "FinishReason", "Mode", "FunctionCallingMode"]
}
